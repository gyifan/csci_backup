CSCI 311 Algorithms
Yifan Ge
Assignment 4
3/7/2014

+++++++++++
+Problem 1+
+++++++++++
  In the first problem, we are investigating the characteristics of the
given three radix and modulus pairs: 128|32, 128|127, 128|97. I ran the
TestHash program with wordList. The following are the output from each.

Outputs:
============================================================================
Using radix 128 and modulus 32.

  Input   	|  hash value
--------------------------------
    cat   	|      20
    act   	|      20
    tac   	|       3
    atc   	|       3
    cta   	|       1
    tca   	|       1
  plant   	|      20
   talc   	|       3
 amoeba   	|       1
duplicate   	|       5
delicate   	|       5
 vinous   	|      19
 levees   	|      19
rhubarb   	|       2
 sleeve   	|       5


hashvalue 1, 	 count = 3
hashvalue 2, 	 count = 1
hashvalue 3, 	 count = 3
hashvalue 5, 	 count = 3
hashvalue 19, 	 count = 2
hashvalue 20, 	 count = 3

Statistics of the hash table:
 MEAN = 0.468750
 # of ZEROS = 26
 MAX COUNT = 3 @ 1
 MIN COUNT: 0 @ 0
 VARIANCE = 1.061523
 STANDARD DEV = 1.030303

Using radix 128 and modulus 127.

  Input   	|  hash value
--------------------------------
    cat   	|      58
    act   	|      58
    tac   	|      58
    atc   	|      58
    cta   	|      58
    tca   	|      58
  plant   	|      35
   talc   	|      39
 amoeba   	|     105
duplicate   	|      66
delicate   	|      65
 vinous   	|      41
 levees   	|       9
rhubarb   	|     107
 sleeve   	|       9


hashvalue 9, 	 count = 2
hashvalue 35, 	 count = 1
hashvalue 39, 	 count = 1
hashvalue 41, 	 count = 1
hashvalue 58, 	 count = 6
hashvalue 65, 	 count = 1
hashvalue 66, 	 count = 1
hashvalue 105, 	 count = 1
hashvalue 107, 	 count = 1

Statistics of the hash table:
 MEAN = 0.118110
 # of ZEROS = 118
 MAX COUNT = 6 @ 58
 MIN COUNT: 0 @ 0
 VARIANCE = 0.356129
 STANDARD DEV = 0.596765


Using radix 128 and modulus 97.

  Input   	|  hash value
--------------------------------
    cat   	|       1
    act   	|      81
    tac   	|      25
    atc   	|       9
    cta   	|      86
    tca   	|      85
  plant   	|      23
   talc   	|      86
 amoeba   	|      68
duplicate   	|      38
delicate   	|      77
 vinous   	|      18
 levees   	|      76
rhubarb   	|      69
 sleeve   	|       2


hashvalue 1, 	 count = 1
hashvalue 2, 	 count = 1
hashvalue 9, 	 count = 1
hashvalue 18, 	 count = 1
hashvalue 23, 	 count = 1
hashvalue 25, 	 count = 1
hashvalue 38, 	 count = 1
hashvalue 68, 	 count = 1
hashvalue 69, 	 count = 1
hashvalue 76, 	 count = 1
hashvalue 77, 	 count = 1
hashvalue 81, 	 count = 1
hashvalue 85, 	 count = 1
hashvalue 86, 	 count = 2

Statistics of the hash table:
 MEAN = 0.154639
 # of ZEROS = 83
 MAX COUNT = 2 @ 86
 MIN COUNT: 0 @ 0
 VARIANCE = 0.151344
 STANDARD DEV = 0.389030
============================================================================

From the output result, we can clearly notice 128|97 pair performs the best
with most evenly spread distribution. On the other side, 128|32 has the
problem of hashing similar words to the same value; 128|127 has the problem
of hashing different permutations to the same value. This result reconfirmed
out prediction that modulus is bad to be a factor of the radix or a prime
of the form 2^p-1.

+++++++++++
+Problem 2+
+++++++++++
  In this problem, we are going to bring the test to a larger scale. The 
following output are generated by the same three given radix and modulus
pairs but with 5lw.dat file, which has 8938 words. For the reason of
excessively long output, I will comment out the printing of each words and
the hash value count part. If you want to see the detail, please uncomment
them in the source file TestHash.java. The Statistics of the output should
give us a decent insight to the each pairs. Here are the outputs.

Outputs:
============================================================================
Using radix 128 and modulus 32.

Statistics of the hash table:
 MEAN = 279.312500
 # of ZEROS = 7
 MAX COUNT = 2785 @ 19
 MIN COUNT: 0 @ 0
 VARIANCE = 268326.777344
 STANDARD DEV = 518.002681


Using radix 128 and modulus 127.

Statistics of the hash table:
 MEAN = 70.377953
 # of ZEROS = 32
 MAX COUNT = 253 @ 125
 MIN COUNT: 0 @ 44
 VARIANCE = 6904.896522
 STANDARD DEV = 83.095707


Using radix 128 and modulus 97.

Statistics of the hash table:
 MEAN = 92.144330
 # of ZEROS = 0
 MAX COUNT = 122 @ 43
 MIN COUNT: 70 @ 80
 VARIANCE = 86.329684
 STANDARD DEV = 9.291377
============================================================================

From these Statistics output, we can find similar result as we concluded in
the previous problem. 128|97 is the best pair with smallest standard
deviation and no value with 0 count (min count is 70, which is very close to 
the mean). On the other hand 128|127 and 128|97 are not so good selection
with high standard deviation, some value with 0 count. I think these poor 
results are caused by the following factors. The modulus is a factor of radix.
This makes the small changes in a word hardly cause change of hash value. 
Another is when modulus is 2^p-1, this makes the hash function hard to
differentiate the permutations of the same set of letters. 

+++++++++++
+Problem 3+
+++++++++++
  Lastly, I tested the system with two additional set of radix and modulus
pairs. In order to avoid the two problems we noticed in the previous tests,
I made sure the radix and modulus are relative prime and modulus is not in
the form of 2^p-1. Also, I want to reduce the average count of each value.
So the pairs I picked was 251|157 and 251|163, which gave the following
output results.

Outputs:
============================================================================
Using radix 251 and modulus 157.

Statistics of the hash table:
 MEAN = 56.929936
 # of ZEROS = 0
 MAX COUNT = 78 @ 11
 MIN COUNT: 42 @ 140
 VARIANCE = 47.555601
 STANDARD DEV = 6.896057


Using radix 251 and modulus 163.

Statistics of the hash table:
 MEAN = 54.834356
 # of ZEROS = 0
 MAX COUNT = 75 @ 72
 MIN COUNT: 38 @ 10
 VARIANCE = 47.806918
 STANDARD DEV = 6.914255
============================================================================
