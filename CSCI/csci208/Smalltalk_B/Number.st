'From Squeak4.1 of 17 April 2010 [latest update: #9957] on 9 February 2012 at 5:04:53 pm'!Magnitude subclass: #Number	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'Kernel-Numbers'!!Number commentStamp: '<historical>' prior: 0!Class Number holds the most general methods for dealing with numbers. Subclasses Float, Fraction, and Integer, and their subclasses, provide concrete representations of a numeric quantity.All of Number's subclasses participate in a simple type coercion mechanism that supports mixed-mode arithmetic and comparisons.  It works as follows:  If	self<typeA> op: arg<typeB>fails because of incompatible types, then it is retried in the following guise:	(arg adaptTypeA: self) op: arg adaptToTypeA.This gives the arg of typeB an opportunity to resolve the incompatibility, knowing exactly what two types are involved.  If self is more general, then arg will be converted, and viceVersa.  This mechanism is extensible to any new number classes that one might wish to add to Squeak.  The only requirement is that every subclass of Number must support a pair of conversion methods specific to each of the other subclasses of Number.!!Number methodsFor: 'arithmetic'!* aNumber 	"Answer the result of multiplying the receiver by aNumber."	self subclassResponsibility! !!Number methodsFor: 'arithmetic'!+ aNumber 	"Answer the sum of the receiver and aNumber."	self subclassResponsibility! !!Number methodsFor: 'arithmetic'!- aNumber 	"Answer the difference between the receiver and aNumber."	self subclassResponsibility! !!Number methodsFor: 'arithmetic'!/ aNumber 	"Answer the result of dividing the receiver by aNumber."	self subclassResponsibility! !!Number methodsFor: 'arithmetic'!// aNumber 	"Integer quotient defined by division with truncation toward negative 	infinity. 9//4 = 2, -9//4 = -3. -0.9//0.4 = -3. \\ answers the remainder 	from this division."	^(self / aNumber) floor! !!Number methodsFor: 'arithmetic'!\\ aNumber 	"modulo. Remainder defined in terms of //. Answer a Number with the 	same sign as aNumber. e.g. 9\\4 = 1, -9\\4 = 3, 9\\-4 = -3, 0.9\\0.4 = 0.1."	^self - (self // aNumber * aNumber)! !!Number methodsFor: 'arithmetic'!abs	"Answer a Number that is the absolute value (positive magnitude) of the 	receiver."	self < 0		ifTrue: [^self negated]		ifFalse: [^self]! !!Number methodsFor: 'arithmetic' stamp: 'mk 10/27/2003 21:00'!arg	"Answer the argument of the receiver (see Complex | arg)."		self isZero ifTrue: [self error: 'Zero (0 + 0 i) does not have an argument.'].	0 < self		ifTrue: [^ 0]		ifFalse: [^ Float pi]! !!Number methodsFor: 'arithmetic'!negated	"Answer a Number that is the negation of the receiver."	^0 - self! !!Number methodsFor: 'arithmetic'!quo: aNumber 	"Integer quotient defined by division with truncation toward zero. -9 quo: 	4 = -2, -0.9 quo: 0.4 = -2. rem: answers the remainder from this division."	^(self / aNumber) truncated! !!Number methodsFor: 'arithmetic' stamp: 'GabrielOmarCotelli 5/23/2009 20:20'!reciprocal	"Returns the reciprocal of self.	In case self is 0 the / signals ZeroDivide"		^1 / self! !!Number methodsFor: 'arithmetic'!rem: aNumber 	"Remainder defined in terms of quo:. Answer a Number with the same 	sign as self. e.g. 9 rem: 4 = 1, -9 rem: 4 = -1. 0.9 rem: 0.4 = 0.1."	^self - ((self quo: aNumber) * aNumber)! !!Number methodsFor: 'comparing' stamp: 'nice 12/26/2009 18:46'!closeTo: num	"are these two numbers close?"	num isFloat ifTrue: [^ num closeTo: self asFloat].	^[self = num] ifError: [false]! !!Number methodsFor: 'converting'!@ y 	"Primitive. Answer a Point whose x value is the receiver and whose y 	value is the argument. Optional. No Lookup. See Object documentation 	whatIsAPrimitive."	<primitive: 18>	^Point x: self y: y! !!Number methodsFor: 'converting' stamp: 'di 11/6/1998 13:43'!adaptToCollection: rcvr andSend: selector	"If I am involved in arithmetic with a Collection, return a Collection of	the results of each element combined with me in that expression."	^ rcvr collect: [:element | element perform: selector with: self]! !!Number methodsFor: 'converting' stamp: 'nice 1/4/2009 20:31'!adaptToFloat: rcvr andCompare: selector 	"If I am involved in comparison with a Float, convert rcvr to a	Fraction. This way, no bit is lost and comparison is exact."		rcvr isFinite		ifFalse: [			selector == #= ifTrue: [^false].			selector == #~= ifTrue: [^true].			rcvr isNaN ifTrue: [^ false].			(selector = #< or: [selector = #'<='])				ifTrue: [^ rcvr positive not].			(selector = #> or: [selector = #'>='])				ifTrue: [^ rcvr positive].			^self error: 'unknow comparison selector'].	^ rcvr asTrueFraction perform: selector with: self! !!Number methodsFor: 'converting' stamp: 'di 11/6/1998 13:21'!adaptToFloat: rcvr andSend: selector 	"If I am involved in arithmetic with a Float, convert me to a Float."	^ rcvr perform: selector with: self asFloat! !!Number methodsFor: 'converting' stamp: 'di 11/6/1998 13:44'!adaptToFraction: rcvr andSend: selector	"If I am involved in arithmetic with a Fraction, convert us and evaluate exprBlock."	^ self subclassResponsibility! !!Number methodsFor: 'converting' stamp: 'di 11/6/1998 13:44'!adaptToInteger: rcvr andSend: selector	"If I am involved in arithmetic with a Integer, convert us and evaluate exprBlock."	^ self subclassResponsibility! !!Number methodsFor: 'converting' stamp: 'di 11/6/1998 13:44'!adaptToPoint: rcvr andSend: selector	"If I am involved in arithmetic with a Point, convert me to a Point."	^ rcvr perform: selector with: self@self! !!Number methodsFor: 'converting' stamp: 'RAH 4/25/2000 19:49'!adaptToScaledDecimal: receiverScaledDecimal andSend: arithmeticOpSelector 	"Do any required conversion and then the arithmetic. 	receiverScaledDecimal arithmeticOpSelector self."	#Numeric.	"add 200/01/19 For ScaledDecimal support."	^ self subclassResponsibility! !!Number methodsFor: 'converting' stamp: 'di 11/6/1998 13:45'!adaptToString: rcvr andSend: selector	"If I am involved in arithmetic with a String, convert it to a Number."	^ rcvr asNumber perform: selector with: self! !!Number methodsFor: 'converting' stamp: 'ar 5/20/2001 01:40'!asB3DVector3	^self@self@self! !!Number methodsFor: 'converting' stamp: 'brp 5/13/2003 10:13'!asDuration

	^ Duration nanoSeconds: self asInteger
! !!Number methodsFor: 'converting' stamp: 'RAH 4/25/2000 19:49'!asFloatD	"Answer a d precision floating-point number approximating the receiver."	#Numeric.	"add 200/01/19 For ANSI <number> protocol."	^ self asFloat! !!Number methodsFor: 'converting' stamp: 'RAH 4/25/2000 19:49'!asFloatE	"Answer a floating-point number approximating the receiver."	#Numeric.	"add 200/01/19 For ANSI <number> protocol."	^ self asFloat! !!Number methodsFor: 'converting' stamp: 'RAH 4/25/2000 19:49'!asFloatQ	"Answer a floating-point number approximating the receiver."	#Numeric.	"add 200/01/19 For ANSI <number> protocol."	^ self asFloat! !!Number methodsFor: 'converting'!asInteger	"Answer an Integer nearest the receiver toward zero."	^self truncated! !!Number methodsFor: 'converting' stamp: 'sw 2/16/1999 18:15'!asNumber	^ self! !!Number methodsFor: 'converting'!asPoint	"Answer a Point with the receiver as both coordinates; often used to 	supply the same value in two dimensions, as with symmetrical gridding 	or scaling."	^self @ self! !!Number methodsFor: 'converting' stamp: 'dtl 9/25/2004 11:47'!asScaledDecimal	"Answer a scaled decimal number approximating the receiver."	#Numeric.	^ self asScaledDecimal: 8! !!Number methodsFor: 'converting' stamp: 'RAH 4/25/2000 19:49'!asScaledDecimal: scale 	"Answer a scaled decimal number, with a fractional precision of scale, 	approximating the receiver."	#Numeric.	"add 200/01/19 For number protocol."	^ ScaledDecimal newFromNumber: self scale: scale! !!Number methodsFor: 'converting' stamp: 'sw 9/8/97 16:30'!asSmallAngleDegrees	"Return the receiver normalized to lie within the range (-180, 180)"	| pos |	pos := self \\ 360.	pos > 180 ifTrue: [pos := pos - 360].	^ pos"#(-500 -300 -150 -5 0 5 150 300 500 1200) collect: [:n | n asSmallAngleDegrees]"! !!Number methodsFor: 'converting' stamp: 'nice 10/5/2009 21:28'!asSmallPositiveDegrees	"Return the receiver normalized to lie within the range (0, 360)"	^self \\ 360! !!Number methodsFor: 'converting' stamp: 'brp 1/9/2004 06:12'!day

	^ self sign days! !!Number methodsFor: 'converting' stamp: 'brp 5/16/2003 07:56'!days

	^ Duration days: self! !!Number methodsFor: 'converting'!degreesToRadians	"The receiver is assumed to represent degrees. Answer the conversion to 	radians."	^self asFloat degreesToRadians! !!Number methodsFor: 'converting' stamp: 'brp 1/9/2004 06:28'!hour

	^ self sign hours
! !!Number methodsFor: 'converting' stamp: 'brp 5/16/2003 07:56'!hours

	^ Duration hours: self! !!Number methodsFor: 'converting' stamp: 'mk 10/27/2003 18:17'!i	^ Complex real: 0 imaginary: self! !!Number methodsFor: 'converting' stamp: 'brp 1/9/2004 06:26'!milliSecond

	^ self sign milliSeconds
! !!Number methodsFor: 'converting' stamp: 'brp 9/25/2003 13:16'!milliSeconds

	^ Duration milliSeconds: self
! !!Number methodsFor: 'converting' stamp: 'brp 1/9/2004 06:16'!minute

	^ self sign minutes
! !!Number methodsFor: 'converting' stamp: 'brp 5/16/2003 07:56'!minutes

	^ Duration minutes: self! !!Number methodsFor: 'converting' stamp: 'brp 1/9/2004 06:27'!nanoSecond

	^ self sign nanoSeconds
! !!Number methodsFor: 'converting' stamp: 'brp 5/16/2003 08:52'!nanoSeconds

	^ Duration nanoSeconds: self.! !!Number methodsFor: 'converting'!radiansToDegrees	"The receiver is assumed to represent radians. Answer the conversion to 	degrees."	^self asFloat radiansToDegrees! !!Number methodsFor: 'converting' stamp: 'brp 1/9/2004 06:17'!second

	^ self sign seconds
! !!Number methodsFor: 'converting' stamp: 'brp 5/16/2003 07:57'!seconds

	^ Duration seconds: self! !!Number methodsFor: 'converting' stamp: 'brp 5/21/2003 08:20'!sign: aNumber
	"Return a Number with the same sign as aNumber"

	^ aNumber positive ifTrue: [self abs] ifFalse: [self abs negated].! !!Number methodsFor: 'converting' stamp: 'brp 1/9/2004 06:19'!week

	^ self sign weeks
! !!Number methodsFor: 'converting' stamp: 'brp 5/16/2003 07:57'!weeks

	^ Duration weeks: self! !!Number methodsFor: 'filter streaming' stamp: 'MPW 1/1/1901 00:07'!byteEncode:aStream	^aStream writeNumber:self.! !!Number methodsFor: 'intervals'!to: stop	"Answer an Interval from the receiver up to the argument, stop, 	incrementing by 1."	^Interval from: self to: stop by: 1! !!Number methodsFor: 'intervals'!to: stop by: step	"Answer an Interval from the receiver up to the argument, stop, 	incrementing by step."	^Interval from: self to: stop by: step! !!Number methodsFor: 'intervals' stamp: 'tao 1/30/1999 08:58'!to: stop by: step do: aBlock 	"Normally compiled in-line, and therefore not overridable.	Evaluate aBlock for each element of the interval (self to: stop by: step)."	| nextValue |	nextValue := self.	step = 0 ifTrue: [self error: 'step must be non-zero'].	step < 0		ifTrue: [[stop <= nextValue]				whileTrue: 					[aBlock value: nextValue.					nextValue := nextValue + step]]		ifFalse: [[stop >= nextValue]				whileTrue: 					[aBlock value: nextValue.					nextValue := nextValue + step]]! !!Number methodsFor: 'intervals'!to: stop do: aBlock 	"Normally compiled in-line, and therefore not overridable.	Evaluate aBlock for each element of the interval (self to: stop by: 1)."	| nextValue |	nextValue := self.	[nextValue <= stop]		whileTrue: 			[aBlock value: nextValue.			nextValue := nextValue + 1]! !!Number methodsFor: 'mathematical functions'!arcCos 	"The receiver is the cosine of an angle. Answer the angle measured in 	radians."	^self asFloat arcCos! !!Number methodsFor: 'mathematical functions'!arcSin	"The receiver is the sine of an angle. Answer the angle measured in 	radians."	^self asFloat arcSin! !!Number methodsFor: 'mathematical functions'!arcTan	"The receiver is the tangent of an angle. Answer the angle measured in 	radians."	^self asFloat arcTan! !!Number methodsFor: 'mathematical functions' stamp: 'jsp 2/24/1999 15:20'!arcTan: denominator	"The receiver is the tangent of an angle. Answer the angle measured in 	radians."	^(self asFloat) arcTan: denominator.! !!Number methodsFor: 'mathematical functions'!cos	"The receiver represents an angle measured in radians. Answer its cosine."	^self asFloat cos! !!Number methodsFor: 'mathematical functions' stamp: 'sd 3/5/2004 10:04'!degreeCos	"Answer the cosine of the receiver taken as an angle in degrees."		^ (90 + self) degreeSin! !!Number methodsFor: 'mathematical functions' stamp: 'sd 3/5/2004 10:04'!degreeSin	"Answer the sine of the receiver taken as an angle in degrees."		^ self asFloat degreesToRadians sin! !!Number methodsFor: 'mathematical functions'!exp	"Answer the exponential of the receiver as a floating point number."	^self asFloat exp! !!Number methodsFor: 'mathematical functions' stamp: 'jm 3/27/98 06:16'!floorLog: radix	"Answer the floor of the log base radix of the receiver."	^ self asFloat floorLog: radix! !!Number methodsFor: 'mathematical functions' stamp: 'ar 8/31/2000 20:05'!interpolateTo: aNumber at: param	^self + (aNumber - self * param)! !!Number methodsFor: 'mathematical functions'!ln	"Answer the natural log of the receiver."	^self asFloat ln! !!Number methodsFor: 'mathematical functions' stamp: 'di 9/8/1998 17:10'!log	"Answer the base-10 log of the receiver."	^self asFloat log! !!Number methodsFor: 'mathematical functions'!log: aNumber 	"Answer the log base aNumber of the receiver."	^self ln / aNumber ln! !!Number methodsFor: 'mathematical functions' stamp: 'nice 12/6/2007 21:46'!raisedTo: aNumber 	"Answer the receiver raised to aNumber."	aNumber isInteger ifTrue:		["Do the special case of integer power"		^ self raisedToInteger: aNumber].	self < 0 ifTrue:		[ self error: self printString, ' raised to a non-integer power' ].	0 = aNumber ifTrue: [^ self class one].	"Special case of exponent=0"	1 = aNumber ifTrue: [^ self].	"Special case of exponent=1"	0 = self ifTrue: [				"Special case of self = 0"		aNumber < 0			ifTrue: [^ (ZeroDivide dividend: self) signal]			ifFalse: [^ self]].	^ (aNumber * self ln) exp		"Otherwise use logarithms"! !!Number methodsFor: 'mathematical functions' stamp: 'GabrielOmarCotelli 5/26/2009 19:49'!raisedToInteger: anInteger	"The 0 raisedToInteger: 0 is an special case. In some contexts must be 1 and in others must	be handled as an indeterminate form.	I take the first context because that's the way that was previously handled.	Maybe further discussion is required on this topic."		|bitProbe result|	anInteger negative ifTrue: [^(self raisedToInteger: anInteger negated) reciprocal].	bitProbe := 1 bitShift: anInteger highBit - 1. 	result := self class one.  	[		(anInteger bitAnd: bitProbe) = 0 ifFalse: [result := result * self].       bitProbe := bitProbe bitShift: -1.		bitProbe > 0 ]	whileTrue: [result := result * result].		^result! !!Number methodsFor: 'mathematical functions'!sin	"The receiver represents an angle measured in radians. Answer its sine."	^self asFloat sin! !!Number methodsFor: 'mathematical functions'!sqrt	"Answer the square root of the receiver."	^self asFloat sqrt! !!Number methodsFor: 'mathematical functions'!squared	"Answer the receiver multipled by itself."	^self * self! !!Number methodsFor: 'mathematical functions'!tan	"The receiver represents an angle measured in radians. Answer its 	tangent."	^self asFloat tan! !!Number methodsFor: 'printing' stamp: 'YG 2/9/2012 15:56'!, anObj	"print with strings"	Transcript show: 'Running the Number , operator'.	Transcript cr.	^ self asString , anObj asString! !!Number methodsFor: 'printing'!defaultLabelForInspector	"Answer the default label to be used for an Inspector window on the receiver."	^ super defaultLabelForInspector, ': ', self printString! !!Number methodsFor: 'printing' stamp: 'sw 6/29/1999 21:10'!isOrAreStringWith: aNoun	| result |	result := self = 1		ifTrue:			[' is one ']		ifFalse:			[self = 0				ifTrue:					[' are no ']				ifFalse:					[' are ', self printString, ' ']].	result := result, aNoun.	self = 1 ifFalse: [result := result, 's'].	^ result"#(0 1 2 98.6) do:	[:num | Transcript cr; show: 'There', (num isOrAreStringWith: 'way'), ' to skin a cat']"! !!Number methodsFor: 'printing' stamp: 'laza 3/29/2004 12:53'!printOn: aStream	self printOn: aStream base: 10! !!Number methodsFor: 'printing' stamp: 'nice 9/25/2007 02:36'!printOn: aStream base: base	"This method should print a representation of the number for the given base,	excluding the base prefix (and the letter r for radix)"		^self subclassResponsibility! !!Number methodsFor: 'printing' stamp: 'nice 4/24/2008 00:38'!printShowingDecimalPlaces: placesDesired	"Print the receiver showing precisely the given number of places desired.  If placesDesired is positive, a decimal point and that many digits after the decimal point will always be shown.  If placesDesired is zero, a whole number will be shown, without a decimal point."	| rounder rounded frac sign integerString fractionString result |	placesDesired <= 0 ifTrue: [^ self rounded printString].	rounder := 10 raisedToInteger: placesDesired.	rounded := self roundTo: rounder reciprocal.	sign := rounded negative ifTrue: ['-'] ifFalse: [''].	integerString := rounded abs integerPart truncated printString.	frac := ((rounded abs fractionPart) * rounder) truncated.	fractionString := frac printString padded: #left to: placesDesired with: $0.	result := sign , integerString , '.' , fractionString.	^result"23 printShowingDecimalPlaces: 223.5698 printShowingDecimalPlaces: 2-234.567 printShowingDecimalPlaces: 523.4567 printShowingDecimalPlaces: 023.5567 printShowingDecimalPlaces: 0-23.4567 printShowingDecimalPlaces: 0-23.5567 printShowingDecimalPlaces: 0100000000 printShowingDecimalPlaces: 10.98 printShowingDecimalPlaces: 5-0.98 printShowingDecimalPlaces: 22.567 printShowingDecimalPlaces: 2-2.567 printShowingDecimalPlaces: 20 printShowingDecimalPlaces: 2"! !!Number methodsFor: 'printing' stamp: 'laza 3/30/2004 10:50'!printString	^self printStringBase: 10! !!Number methodsFor: 'printing'!printStringBase: base	^ String streamContents:		[:strm | self printOn: strm base: base]! !!Number methodsFor: 'printing' stamp: 'laza 3/29/2004 12:50'!storeOn: aStream 	self printOn: aStream! !!Number methodsFor: 'printing' stamp: 'nice 9/25/2007 02:35'!storeOn: aStream base: base	"This method should print a representation of the number for the given base,	including the base prefix (with letter r for radix)"		^self subclassResponsibility! !!Number methodsFor: 'printing'!storeStringBase: base	^ String streamContents: [:strm | self storeOn: strm base: base]! !!Number methodsFor: 'printing' stamp: 'sw 7/1/1998 12:33'!stringForReadout	^ self rounded printString! !!Number methodsFor: 'testing'!even	"Answer whether the receiver is an even number."	^self \\ 2 = 0! !!Number methodsFor: 'testing' stamp: 'sw 12/30/1998 13:21'!isDivisibleBy: aNumber	aNumber = 0 ifTrue: [^ false].	aNumber isInteger ifFalse: [^ false].	^ (self \\ aNumber) = 0! !!Number methodsFor: 'testing' stamp: 'nice 8/9/2009 21:02'!isInf	self deprecated: 'Use #isInfinite instead'.	^self isInfinite! !!Number methodsFor: 'testing' stamp: 'tao 4/19/98 23:33'!isInfinite	^ false! !!Number methodsFor: 'testing' stamp: 'tao 10/10/97 16:36'!isNaN	^ false! !!Number methodsFor: 'testing'!isNumber	^ true! !!Number methodsFor: 'testing'!isZero	^self = 0! !!Number methodsFor: 'testing' stamp: 'di 4/23/1998 11:18'!negative	"Answer whether the receiver is mathematically negative."	^ self < 0! !!Number methodsFor: 'testing'!odd	"Answer whether the receiver is an odd number."	^self even == false! !!Number methodsFor: 'testing' stamp: 'di 4/23/1998 11:17'!positive	"Answer whether the receiver is positive or equal to 0. (ST-80 protocol).	See also strictlyPositive"	^ self >= 0! !!Number methodsFor: 'testing'!sign	"Answer 1 if the receiver is greater than 0, -1 if less than 0, else 0."	self > 0 ifTrue: [^1].	self < 0 ifTrue: [^-1].	^0! !!Number methodsFor: 'testing' stamp: 'di 4/23/1998 11:02'!strictlyPositive	"Answer whether the receiver is mathematically positive."	^ self > 0! !!Number methodsFor: 'truncation and round off'!ceiling	"Answer the integer nearest the receiver toward positive infinity."	self <= 0.0		ifTrue: [^self truncated]		ifFalse: [^self negated floor negated]! !!Number methodsFor: 'truncation and round off' stamp: 'di 2/19/98 21:58'!detentBy: detent atMultiplesOf: grid snap: snap	"Map all values that are within detent/2 of any multiple of grid to that multiple.  Otherwise, if snap is true, return self, meaning that the values in the dead zone will never be returned.  If snap is false, then expand the range between dead zones so that it covers the range between multiples of the grid, and scale the value by that factor."	| r1 r2 |	r1 := self roundTo: grid.  "Nearest multiple of grid"	(self roundTo: detent) = r1 ifTrue: [^ r1].  "Snap to that multiple..."	snap ifTrue: [^ self].  "...or return self"	r2 := self < r1  "Nearest end of dead zone"		ifTrue: [r1 - (detent asFloat/2)]		ifFalse: [r1 + (detent asFloat/2)].	"Scale values between dead zones to fill range between multiples"	^ r1 + ((self - r2) * grid asFloat / (grid - detent))"	(170 to: 190 by: 2) collect: [:a | a detentBy: 10 atMultiplesOf: 90 snap: true] 	(170 to: 190 by: 2) collect: [:a | a detentBy: 10 atMultiplesOf: 90 snap: false]	(3.9 to: 4.1 by: 0.02) collect: [:a | a detentBy: 0.1 atMultiplesOf: 1.0 snap: true] 	(-3.9 to: -4.1 by: -0.02) collect: [:a | a detentBy: 0.1 atMultiplesOf: 1.0 snap: false]"! !!Number methodsFor: 'truncation and round off'!floor	"Answer the integer nearest the receiver toward negative infinity."	| truncation |	truncation := self truncated.	self >= 0 ifTrue: [^truncation].	self = truncation		ifTrue: [^truncation]		ifFalse: [^truncation - 1]! !!Number methodsFor: 'truncation and round off' stamp: 'GabrielOmarCotelli 5/26/2009 21:58'!fractionPart		"Added for ANSI compatibility"		^self - self integerPart! !!Number methodsFor: 'truncation and round off' stamp: 'GabrielOmarCotelli 5/26/2009 21:57'!integerPart	"Added for ANSI compatibility"	^self truncated! !!Number methodsFor: 'truncation and round off'!reduce    "If self is close to an integer, return that integer"    ^ self! !!Number methodsFor: 'truncation and round off' stamp: 'di 10/4/1999 08:08'!roundTo: quantum 	"Answer the nearest number that is a multiple of quantum."	^(self / quantum) rounded * quantum! !!Number methodsFor: 'truncation and round off'!roundUpTo: aNumber 	"Answer the next multiple of aNumber toward infinity that is nearest the 	receiver."	^(self/aNumber) ceiling * aNumber! !!Number methodsFor: 'truncation and round off'!rounded	"Answer the integer nearest the receiver."	^(self + (self sign / 2)) truncated! !!Number methodsFor: 'truncation and round off'!truncateTo: aNumber 	"Answer the next multiple of aNumber toward zero that is nearest the 	receiver."	^(self quo: aNumber)		* aNumber! !!Number methodsFor: 'truncation and round off'!truncated	"Answer an integer nearest the receiver toward zero."	^self quo: 1! !!Number methodsFor: '*Morphic-NewCurve-testing' stamp: 'jmv 2/21/2006 13:15'!isNonZero	"Return true for numbers not zero and false for all other	objects "	^ self isZero not! !!Number methodsFor: '*Etoys-tiles' stamp: 'sw 9/27/2001 17:26'!basicType	"Answer a symbol representing the inherent type of the receiver"	^ #Number! !!Number methodsFor: '*Etoys-tiles' stamp: 'sw 10/31/97 13:54'!newTileMorphRepresentative	^ TileMorph new addArrows; setLiteral: self; addSuffixIfCan! !!Number methodsFor: '*Etoys-vocabulary' stamp: 'sw 8/3/2001 13:43'!vocabularyDemanded	"Answer the vocabulary normally preferred by this object"	^ Vocabulary numberVocabulary! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!Number class	instanceVariableNames: ''!!Number class methodsFor: 'instance creation' stamp: 'nice 2/22/2010 21:43'!readFrom: stringOrStream 	"Answer a number as described on aStream.  The number may	be any accepted Smalltalk literal Number format.	It can include a leading radix specification, as in 16rFADE.	It can as well be NaN, Infinity or -Infinity for conveniency.	If stringOrStream does not start with a valid number description, fail."		^(ExtendedNumberParser on: stringOrStream) nextNumber! !!Number class methodsFor: 'instance creation' stamp: 'nice 3/15/2008 00:27'!readFrom: stringOrStream base: base	"Answer a number as described on aStream in the given number base."	^(SqNumberParser on: stringOrStream) nextNumberBase: base! !!Number class methodsFor: 'instance creation' stamp: 'nice 2/22/2010 22:40'!readFrom: stringOrStream ifFail: aBlock	"Answer a number as described on aStream.  The number may	be any accepted Smalltalk literal Number format.	It can include a leading radix specification, as in 16rFADE.	It can as well be NaN, Infinity or -Infinity for conveniency.	If input does not represent a valid number, then execute fail block	and leave the stream positioned before offending character"		^(ExtendedNumberParser on: stringOrStream) failBlock: aBlock; nextNumber! !!Number class methodsFor: 'instance creation' stamp: 'nice 2/22/2010 21:41'!readSqueakSyntaxFrom: stringOrStream 	"Answer a number as described on aStream.  The number may	be any accepted Smalltalk literal Number format.	It can include a leading radix specification, as in 16rFADE.	It can as well be NaN, Infinity or -Infinity for conveniency.	If stringOrStream does not start with a valid number description, fail."		^(SqNumberParser on: stringOrStream) nextNumber! !!Number class methodsFor: 'constants' stamp: 'GabrielOmarCotelli 5/23/2009 20:46'!one	^1! !!Number class methodsFor: '*311Deprecated' stamp: 'nice 2/22/2010 22:41'!readExactlyFrom: stringOrStream 	"Answer a number as described on aStream. The number may	include a leading radix specification, as in 16rFADE"		self deprecated: 'Use #readFrom: '.	^ self readFrom: stringOrStream ! !