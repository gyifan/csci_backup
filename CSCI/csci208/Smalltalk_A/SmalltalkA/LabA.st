Object subclass: #LabA	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'LabA'!!LabA methodsFor: 'problem' stamp: 'YG 2/2/2012 16:08'!factorial: input	"Calculates the factorial of the input."		| count sum |	count := 1.	sum := 1.	[count <= input] whileTrue: [		sum := sum * count.		count := count + 1.	].	^ sum! !!LabA methodsFor: 'problem' stamp: 'YG 2/2/2012 16:57'!fibonacci: num	"return the nth number of the fibonacci sequence"		^ (num <= 2)	ifTrue: [1]	ifFalse: [ (self fibonacci: (num-1)) + (self fibonacci: (num-2))]! !!LabA methodsFor: 'problem' stamp: 'YG 2/2/2012 17:10'!sing: songs		^ [: voice |Transcript show: voice asString, ' ', songs, '.'; cr]! !!LabA methodsFor: 'problem' stamp: 'YG 2/2/2012 16:41'!sum: input	"Return the sum of integers"		| sum |	sum := 0.	input do: [:element | sum := sum + element].	^ sum! !!LabA methodsFor: 'sample methods' stamp: 'YG 2/2/2012 16:44'!factrec: num	"this is factorial"		^ (num=0)	ifTrue: [1]	ifFalse: [ num * (self factrec: (num-1))]! !!LabA methodsFor: 'sample methods' stamp: 'YG 2/2/2012 15:39'!findLarger: num1 and: num2	"returns larger number"		^ (num1>num2)	ifTrue: num1	ifFalse: num2! !!LabA methodsFor: 'sample methods' stamp: 'YG 2/2/2012 16:13'!frogsHopping	"Each frog in an array gets to hop"		| array |	array := #(Kermit Frogger FrogPrine).	Transcript show: 'There are ', (array size asString), ' frogs.'; cr.	array do: [:frog | Transcript show: frog asString, ' hops.'; cr]! !!LabA methodsFor: 'sample methods' stamp: 'YG 2/2/2012 15:53'!giveMe: aString repeated: numTimes	"repeats a string multiple times"		| tempString |	tempString := ''.	numTimes timesRepeat: [		tempString := tempString, aString	].	^ tempString! !!LabA methodsFor: 'sample methods' stamp: 'YG 2/2/2012 16:00'!parity: input	"This method prints ODD or EVEN for each number from 0 thru the input number"		| count |	count := 0.	[count <= input] whileTrue: [		(count odd) ifTrue: [Transcript show: 'ODD']			ifFalse: [Transcript show: 'EVEN'].		count := count + 1.		Transcript cr.	]! !!LabA methodsFor: 'sample methods' stamp: 'YG 2/2/2012 17:10'!pondChorus	"Each animal in the pond sings its song.	(A canon is a collection of songs)"		| canon |	canon := [:singers :song |		singers do: (self sing: song).	].	canon value: #(Kermit Frogger FrogPrince) value: 'croaks'.	canon value: #(Donald Daffy) value: 'quacks'.! !!LabA methodsFor: 'sample methods' stamp: 'YG 2/2/2012 15:33'!sayHello	"This is hello world"		^ 'Hello World!!'! !!LabA methodsFor: 'sample methods' stamp: 'YG 2/2/2012 15:37'!sequential	"Testing sequential statements"	Transcript show: 'one'; show: ' two'.	Transcript show: ' three'.	Transcript cr.! !