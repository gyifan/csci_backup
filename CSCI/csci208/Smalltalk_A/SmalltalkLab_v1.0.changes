'From Squeak4.1 of 17 April 2010 [latest update: #9957] on 17 April 2010 at 5:22:05 pm'!----STARTUP----{17 April 2010 . 5:21:54 pm} as C:\Squeak\4.0\4.1-final\Squeak4.1.image!Smalltalk appendChangesTo: 'SqueakV41.sources'.!----QUIT----{17 April 2010 . 5:22:11 pm} Squeak4.1.image priorSource: 89!----STARTUP----{27 January 2011 . 3:18:14 pm} as /nfs/unixspace/linux/accounts/COURSES/cs208/src/Squeak4.1.image!----QUIT/NOSAVE----{27 January 2011 . 3:18:22 pm} Squeak4.1.image priorSource: 229!----STARTUP----{27 January 2011 . 5:03:41 pm} as /nfs/unixspace/linux/accounts/COURSES/cs208/src/Squeak4.1.image!----SNAPSHOT----{27 January 2011 . 5:21:57 pm} Squeak4.2.image priorSource: 229!----QUIT/NOSAVE----{27 January 2011 . 5:22:26 pm} Squeak4.2.image priorSource: 621!----STARTUP----{2 February 2011 . 4:42:37 pm} as /nfs/unixspace/linux/accounts/COURSES/cs208/src/SmalltalkLab.image!----SNAPSHOT----{2 February 2011 . 4:43:01 pm} SmalltalkLab.image priorSource: 621!!SmalltalkImage methodsFor: 'snapshot and quit' stamp: 'SM 2/2/2011 16:44' prior: 58481809!snapshot: save andQuit: quit embedded: embeddedFlag	"Mark the changes file and close all files as part of #processShutdownList.	If save is true, save the current state of this Smalltalk in the image file.	If quit is true, then exit to the outer OS shell.	The latter part of this method runs when resuming a previously saved image. This resume logic checks for a document file to process when starting up."	| resuming msg |	Object flushDependents.	Object flushEvents.	(SourceFiles at: 2) ifNotNil:[		msg := String streamContents: [ :s |			s nextPutAll: '----';			nextPutAll: (save ifTrue: [ quit ifTrue: [ 'QUIT' ] ifFalse: [ 'SNAPSHOT' ] ]							ifFalse: [quit ifTrue: [ 'QUIT/NOSAVE' ] ifFalse: [ 'NOP' ]]);			nextPutAll: '----';			print: Date dateAndTimeNow; space;			nextPutAll: (FileDirectory default localNameFor: self imageName);			nextPutAll: ' priorSource: ';			print: LastQuitLogPosition ].		self assureStartupStampLogged.		save ifTrue: [ LastQuitLogPosition := (SourceFiles at: 2) setToEnd; position ].		self logChange: msg.		"Transcript cr; show: msg"	].	Smalltalk processShutDownList: quit.	Cursor write show.	save ifTrue: [resuming := embeddedFlag 					ifTrue: [self snapshotEmbeddedPrimitive] 					ifFalse: [self snapshotPrimitive].  "<-- PC frozen here on image file"				resuming == false "guard against failure" ifTrue:					["Time to reclaim segment files is immediately after a save"					Smalltalk at: #ImageSegment						ifPresent: [:theClass | theClass reclaimObsoleteSegmentFiles]]]		ifFalse: [resuming := false].	quit & (resuming == false) ifTrue: [self quitPrimitive].	Cursor normal show.	Smalltalk setGCParameters.	resuming == true ifTrue: [Smalltalk clearExternalObjects].	Smalltalk processStartUpList: resuming == true.	resuming == true ifTrue:[		self setPlatformPreferences.		self recordStartupStamp].	Project current wakeUpTopWindow.	"Now it's time to raise an error"	resuming == nil ifTrue: [self error:'Failed to write image file (disk full?)'].	^ resuming! !----SNAPSHOT----{2 February 2011 . 4:44:33 pm} SmalltalkLab.image priorSource: 907!----QUIT/NOSAVE----{2 February 2011 . 4:44:38 pm} SmalltalkLab.image priorSource: 3118!----STARTUP----{2 February 2011 . 4:44:40 pm} as /nfs/unixspace/linux/accounts/COURSES/cs208/src/SmalltalkLab.image!----SNAPSHOT----{2 February 2011 . 4:44:53 pm} SmalltalkLab.image priorSource: 3118!----QUIT/NOSAVE----{2 February 2011 . 4:45 pm} SmalltalkLab.image priorSource: 3411!----STARTUP----{2 February 2011 . 4:45:02 pm} as /nfs/unixspace/linux/accounts/COURSES/cs208/src/SmalltalkLab.image!----QUIT/NOSAVE----{2 February 2011 . 4:45:18 pm} SmalltalkLab.image priorSource: 3411!----STARTUP----{2 February 2012 . 3:13:31 pm} as /nfs/unixspace/linux/accounts/student/y/ygg001/csci208/Smalltalk_A/SmalltalkLab.image!----SNAPSHOT----{2 February 2012 . 3:15:53 pm} SmalltalkLab_v1.0.image priorSource: 3411!Transcript show:	'hello world'; cr.!3+4. !3+4. !3 + 4. !3 + 4. !3 + 4. !3 + 4. !3+4. !3<4.!Object subclass: #LabA	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'LabA'!!LabA methodsFor: 'sample methods' stamp: 'YG 2/2/2012 15:33'!sayHello	"This is hello world"		^ 'Hello World!!'! !----SNAPSHOT----{2 February 2012 . 3:33:36 pm} SmalltalkLab_v1.0.image priorSource: 3929!----SNAPSHOT----{2 February 2012 . 3:33:40 pm} SmalltalkLab_v1.0.image priorSource: 4364!x := LabA new.!x sayHello. !!LabA methodsFor: 'sample methods' stamp: 'YG 2/2/2012 15:37'!sequential	"Testing sequential statements"	Transcript show: 'one'; show: ' two'.	Transcript show: ' three'.	Transcript cr.! !x sequential.!x sequential.!!LabA methodsFor: 'sample methods' stamp: 'YG 2/2/2012 15:39'!findLarger: num1 and: num2	"returns larger number"		^ (num1>num2)	ifTrue: num1	ifFalse: num2! !x findLarger: 3 and: 4.!!LabA methodsFor: 'sample methods' stamp: 'YG 2/2/2012 15:53'!giveMe: aString repeated: numTimes	"repeats a string multiple times"		| tempString |	tempString := ''.	numTimes timesRepeat: [		tempString := tempString, aString	].	^ tempString! !----SNAPSHOT----{2 February 2012 . 3:53:40 pm} SmalltalkLab_v1.0.image priorSource: 4455!----SNAPSHOT----{2 February 2012 . 3:53:41 pm} SmalltalkLab_v1.0.image priorSource: 5246!----SNAPSHOT----{2 February 2012 . 3:53:48 pm} SmalltalkLab_v1.0.image priorSource: 5337!x giveMe: 'hi' repeated: 5.!!LabA methodsFor: 'sample methods' stamp: 'YG 2/2/2012 16:00'!parity: input	"This method prints ODD or EVEN for each number from 0 thru the input number"		| count |	count := 0.	[count <= input] whileTrue: [		(count odd) ifTrue: [Transcript show: 'ODD']			ifFalse: [Transcript show: 'EVEN'].		count := count + 1.		Transcript cr.	]! !----SNAPSHOT----{2 February 2012 . 4:00:29 pm} SmalltalkLab_v1.0.image priorSource: 5428!x parity: 5.!x parity: 5.!----SNAPSHOT----{2 February 2012 . 4:01:18 pm} SmalltalkLab_v1.0.image priorSource: 5893!!LabA methodsFor: 'problem' stamp: 'YG 2/2/2012 16:03'!factorial: input	"Calculates the factorial of the input."		! !!LabA methodsFor: 'problem' stamp: 'YG 2/2/2012 16:03' prior: 33560594!factorial: input	"Calculates the factorial of the input."		| count |	! !!LabA methodsFor: 'problem' stamp: 'YG 2/2/2012 16:06' prior: 33560732!factorial: input	"Calculates the factorial of the input."		| count sum |	count := 0.	sum := 0.	[count <= input] whileTrue: [		sum := sum + count.		count := count + 1.	].	^ sum. ! !!LabA methodsFor: 'problem' stamp: 'YG 2/2/2012 16:07' prior: 33560881!factorial: input	"Calculates the factorial of the input."		| count sum |	count := 0.	sum := 0.	[count <= input] whileTrue: [		sum := sum + count.		count := count + 1.	].	^ sum! !x factorial: 5.!!LabA methodsFor: 'problem' stamp: 'YG 2/2/2012 16:08' prior: 33561144!factorial: input	"Calculates the factorial of the input."		| count sum |	count := 1.	sum := 0.	[count <= input] whileTrue: [		sum := sum * count.		count := count + 1.	].	^ sum! !x factorial: 5.!!LabA methodsFor: 'problem' stamp: 'YG 2/2/2012 16:08' prior: 33561423!factorial: input	"Calculates the factorial of the input."		| count sum |	count := 1.	sum := 1.	[count <= input] whileTrue: [		sum := sum * count.		count := count + 1.	].	^ sum! !x factorial: 5.!x factorial: 1.!x factorial: 0.!x factorial: 2.!x factorial: 3.!x factorial: 4.!x factorial: 5.!----SNAPSHOT----{2 February 2012 . 4:09:39 pm} SmalltalkLab_v1.0.image priorSource: 6014!----SNAPSHOT----{2 February 2012 . 4:09:40 pm} SmalltalkLab_v1.0.image priorSource: 7584!!LabA methodsFor: 'sample methods' stamp: 'YG 2/2/2012 16:13'!frogsHopping	"Each frog in an array gets to hop"		| array |	array := #(Kermit Frogger FrogPrine).	Transcript show: 'There are ', (array size asString), ' frogs.'; cr.	array do: [:frog | Transcript show: frog asString, ' hops.'; cr]! !x frogsHopping. !!LabA methodsFor: 'sample methods' stamp: 'YG 2/2/2012 16:22'!pondChorus	"Each animal in the pond sings its song.	(A canon is a collection of songs)"		| canon |	canon := [:singers :song |		singers do: [: voice |Transcript show: voice asString, '', song, '.'; cr]	].	canon value: #(Kermit Frogger FrogPrince) value: 'croaks'.	canon value: #(Donald Daffy) value: 'quacks'.! !----SNAPSHOT----{2 February 2012 . 4:34:18 pm} SmalltalkLab_v1.0.image priorSource: 7675!!LabA methodsFor: 'problem' stamp: 'YG 2/2/2012 16:34'!sum: input! !!LabA methodsFor: 'problem' stamp: 'YG 2/2/2012 16:35' prior: 33563053!sum: input	"Return the sum of integers"		! !----SNAPSHOT----{2 February 2012 . 4:35:41 pm} SmalltalkLab_v1.0.image priorSource: 8473!!LabA methodsFor: 'problem' stamp: 'YG 2/2/2012 16:38' prior: 33563140!sum: input	"Return the sum of integers"		| sum |	sum := 0.	input do: [:element | sum := sum + element].	^ sum! !----SNAPSHOT----{2 February 2012 . 4:38:48 pm} SmalltalkLab_v1.0.image priorSource: 8755!----SNAPSHOT----{2 February 2012 . 4:38:49 pm} SmalltalkLab_v1.0.image priorSource: 9037!!LabA methodsFor: 'problem' stamp: 'YG 2/2/2012 16:40'!sum: input value: integers	"Return the sum of integers"		| sum |	sum := 0.	input do: [:element | sum := sum + element].	^ sum! !!LabA methodsFor: 'problem' stamp: 'YG 2/2/2012 16:41' prior: 33563351!sum: input	"Return the sum of integers"		| sum |	sum := 0.	input do: [:element | sum := sum + element].	^ sum! !y := #(1 2 3 4).!x sum: y.!LabA removeSelector: #sum:value:!----SNAPSHOT----{2 February 2012 . 4:43:21 pm} SmalltalkLab_v1.0.image priorSource: 9128!!LabA methodsFor: 'sample methods' stamp: 'YG 2/2/2012 16:44'!factrec: num	"this is factorial"		^ (num=0)	ifTrue: [1]	ifFalse: [ num * (self factrec: (num-1))]! !x factrec: 5.!!LabA methodsFor: 'problem' stamp: 'YG 2/2/2012 16:54'!fibonacci: num	"return the nth number of the fibonacci sequence"! !!LabA methodsFor: 'problem' stamp: 'YG 2/2/2012 16:56' prior: 33564432!fibonacci: num	"return the nth number of the fibonacci sequence"		^ (num <= 1)	ifTrue: [1]	ifFalse: [ (self fibonacci: (num-1)) + (self fibonacci: (num-2))]! !x fibonacci: 2.!!LabA methodsFor: 'problem' stamp: 'YG 2/2/2012 16:57' prior: 33564573!fibonacci: num	"return the nth number of the fibonacci sequence"		^ (num <= 2)	ifTrue: [1]	ifFalse: [ (self fibonacci: (num-1)) + (self fibonacci: (num-2))]! !x fibonacci: 2.!x fibonacci: 3.!x fibonacci: 4.!x fibonacci: 5.!x fibonacci: 6.!!LabA methodsFor: 'problem' stamp: 'YG 2/2/2012 16:59'!sing: songs	! !!LabA methodsFor: 'problem' stamp: 'YG 2/2/2012 17:09' prior: 33565139!sing: songs		! !!LabA methodsFor: 'problem' stamp: 'YG 2/2/2012 17:09' prior: 33565228!sing: songs		^ [: voice |Transcript show: voice asString, '', songs, '.'; cr]! !!LabA methodsFor: 'sample methods' stamp: 'YG 2/2/2012 17:10' prior: 33562585!pondChorus	"Each animal in the pond sings its song.	(A canon is a collection of songs)"		| canon |	canon := [:singers :song |		singers do: (self sing: song).	].	canon value: #(Kermit Frogger FrogPrince) value: 'croaks'.	canon value: #(Donald Daffy) value: 'quacks'.! !x pondChorus.!!LabA methodsFor: 'problem' stamp: 'YG 2/2/2012 17:10' prior: 33565319!sing: songs		^ [: voice |Transcript show: voice asString, ' ', songs, '.'; cr]! !x pondChorus.!----SNAPSHOT----{2 February 2012 . 5:11:27 pm} SmalltalkLab_v1.0.image priorSource: 9667!----SNAPSHOT----{2 February 2012 . 5:11:28 pm} SmalltalkLab_v1.0.image priorSource: 11514!----SNAPSHOT----{2 February 2012 . 5:11:28 pm} SmalltalkLab_v1.0.image priorSource: 11605!x factorial: 5.!x factorial: 10.!x sum: y.!x fibonacci: 6.!x fibonacci: 15.!----SNAPSHOT----{2 February 2012 . 5:15:10 pm} SmalltalkLab_v1.0.image priorSource: 11697!----QUIT/NOSAVE----{2 February 2012 . 5:18:34 pm} SmalltalkLab_v1.0.image priorSource: 11875!----STARTUP----{9 February 2012 . 2:59:04 pm} as /nfs/unixspace/linux/accounts/student/y/ygg001/csci208/Smalltalk_A/SmalltalkLab_v1.0.image!----QUIT/NOSAVE----{9 February 2012 . 2:59:47 pm} SmalltalkLab_v1.0.image priorSource: 11875!