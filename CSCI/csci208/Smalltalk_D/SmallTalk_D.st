Object subclass: #Apple	instanceVariableNames: 'numSeeds variety new'	classVariableNames: 'Core Stem'	poolDictionaries: ''	category: 'LabD'!!Apple commentStamp: '<historical>' prior: 0!The Apple class used in the Smalltalk D lab.Instance Variables	numSeeds:		<Object>	variety:		<Object>numSeeds	- the number of seeds in the applevariety	- the variety of the apple!!Apple methodsFor: 'as yet unclassified' stamp: 'LW 10/8/2010 13:22'!admire	"Admire the apple."	^ 'It''s a tasty ' , variety , ' apple. with ', numSeeds asString, ' seeds.'.! !!Apple methodsFor: 'as yet unclassified' stamp: 'LW 10/4/2010 15:26'!bite	"Bite method for an Apple"	^ 'Mmmm'.! !!Apple methodsFor: 'as yet unclassified' stamp: 'LW 10/8/2010 13:20'!doIt: str	"Do the given action to this apple."	^ self perform: str asSymbol.! !!Apple methodsFor: 'as yet unclassified' stamp: 'YG 3/1/2012 16:22'!plant	"reflectively calls the correct planting method based on the number of seeds in the Apple, sets the Apples seed count to 0, and returns the results of the planting."	^ self perform: ('plant', numSeeds asString, 'Seeds') asSymbol! !!Apple methodsFor: 'as yet unclassified' stamp: 'YG 3/1/2012 15:25'!plant0Seeds	"Plant apple with no seeds"	^ 'Its a used apple, you get no trees!!'! !!Apple methodsFor: 'as yet unclassified' stamp: 'YG 3/1/2012 16:07'!plant1Seeds	"plant apple with one seed"		| tree |		tree := AppleTree variety: 'Gala'.	^ tree! !!Apple methodsFor: 'as yet unclassified' stamp: 'YG 3/1/2012 16:11'!plant2Seeds	"plant apple with two seeds"	| set amount count |		set := Set new.	amount := ((0 to: 10) atRandom).	count := 0.	[count < amount ] whileTrue: [		set add: AppleTree new.		count := count + 1.	].		^ set	! !!Apple methodsFor: 'as yet unclassified' stamp: 'YG 3/1/2012 16:16'!plant3Seeds	"plant Apple with three seeds"	| set setTree number count countSet|	set := Set new.	number := ((0 to: 10) atRandom).	countSet := 0.	count := 0.		[ countSet < number ] whileTrue: [		count := 0.		setTree := Set new.		[ count < number ] whileTrue: [			setTree add: AppleTree new.			count := count + 1.		].		set add: setTree.		countSet := countSet + 1.	].	^ set		! !!Apple methodsFor: 'as yet unclassified' stamp: 'LW 10/4/2010 15:16'!setNumSeeds: ns variety: v	"Store the input values in the instance variables."	numSeeds := ns.	variety := v.! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!Apple class	instanceVariableNames: ''!!Apple class methodsFor: 'as yet unclassified' stamp: 'LW 10/4/2010 15:17'!numSeeds: ns variety: v	"Create an instance of an Apple and set the instance variables."	^ self new setNumSeeds: ns variety: v.! !!Apple class methodsFor: 'as yet unclassified' stamp: 'SM 3/1/2011 09:20'!variety: v	"Create an instance of an Apple and set the instance variables."	^ self new setNumSeeds: ((0 to: 3) atRandom) variety: v.! !Object subclass: #AppleTree	instanceVariableNames: 'variety'	classVariableNames: ''	poolDictionaries: ''	category: 'LabD'!!AppleTree commentStamp: '<historical>' prior: 0!The AppleTree class used in the Smalltalk D lab.!!AppleTree methodsFor: 'as yet unclassified' stamp: 'YG 3/1/2012 16:37'!adore	"return a string with the variety information."	^ 'How beautiful this ', variety asString, ' is!!'.! !!AppleTree methodsFor: 'as yet unclassified' stamp: 'YG 3/1/2012 16:36'!appreciate	"return a string with variety information."	^ 'What a nice ', variety asString, ' tree it is!!'! !!AppleTree methodsFor: 'as yet unclassified' stamp: 'LW 10/8/2010 13:37'!setVariety: v	variety := v.! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!AppleTree class	instanceVariableNames: 'MethodAdore MethodAppreciate Condition'!!AppleTree class methodsFor: 'as yet unclassified' stamp: 'YG 3/1/2012 17:07'!setup	"sets the two class variables to the methods."		| dict |		dict := methodDict.	MethodAdore := dict at: #adore.	MethodAppreciate := dict at: #appreciate.		dict at: #admire put: MethodAdore.	Condition := 0.! !!AppleTree class methodsFor: 'as yet unclassified' stamp: 'YG 3/1/2012 17:10'!swap	"swaps the code behind the admire method back and forth between adore and appreciate."	| dict |	dict := methodDict.		(Condition = 0) ifTrue: [		dict at: #admire put: MethodAppreciate.		Condition := 1.	] ifFalse: [		dict at: #admire put: MethodAdore.		Condition := 0.	].! !!AppleTree class methodsFor: 'as yet unclassified' stamp: 'YG 3/1/2012 17:09'!variety: v	"Create an apple tree with the variety given as a parameter"	| tree |		tree := self new.		tree class setup.	tree setVariety: v.	^ tree.! !Apple subclass: #CrabApple	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'LabD'!!CrabApple commentStamp: '<historical>' prior: 0!The CrabApple class used in the SmalltalkC lab.!!CrabApple methodsFor: 'as yet unclassified' stamp: 'LW 10/4/2010 15:27'!bite	"Bite method for a CrabApple."	^ 'Ugh sour!!'.! !