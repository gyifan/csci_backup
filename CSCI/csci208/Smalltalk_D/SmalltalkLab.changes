'From Squeak4.1 of 17 April 2010 [latest update: #9957] on 17 April 2010 at 5:22:05 pm'!----STARTUP----{17 April 2010 . 5:21:54 pm} as C:\Squeak\4.0\4.1-final\Squeak4.1.image!Smalltalk appendChangesTo: 'SqueakV41.sources'.!----QUIT----{17 April 2010 . 5:22:11 pm} Squeak4.1.image priorSource: 89!----STARTUP----{27 January 2011 . 3:18:14 pm} as /nfs/unixspace/linux/accounts/COURSES/cs208/src/Squeak4.1.image!----QUIT/NOSAVE----{27 January 2011 . 3:18:22 pm} Squeak4.1.image priorSource: 229!----STARTUP----{27 January 2011 . 5:03:41 pm} as /nfs/unixspace/linux/accounts/COURSES/cs208/src/Squeak4.1.image!----SNAPSHOT----{27 January 2011 . 5:21:57 pm} Squeak4.2.image priorSource: 229!----QUIT/NOSAVE----{27 January 2011 . 5:22:26 pm} Squeak4.2.image priorSource: 621!----STARTUP----{2 February 2011 . 4:42:37 pm} as /nfs/unixspace/linux/accounts/COURSES/cs208/src/SmalltalkLab.image!----SNAPSHOT----{2 February 2011 . 4:43:01 pm} SmalltalkLab.image priorSource: 621!!SmalltalkImage methodsFor: 'snapshot and quit' stamp: 'SM 2/2/2011 16:44' prior: 58481809!snapshot: save andQuit: quit embedded: embeddedFlag	"Mark the changes file and close all files as part of #processShutdownList.	If save is true, save the current state of this Smalltalk in the image file.	If quit is true, then exit to the outer OS shell.	The latter part of this method runs when resuming a previously saved image. This resume logic checks for a document file to process when starting up."	| resuming msg |	Object flushDependents.	Object flushEvents.	(SourceFiles at: 2) ifNotNil:[		msg := String streamContents: [ :s |			s nextPutAll: '----';			nextPutAll: (save ifTrue: [ quit ifTrue: [ 'QUIT' ] ifFalse: [ 'SNAPSHOT' ] ]							ifFalse: [quit ifTrue: [ 'QUIT/NOSAVE' ] ifFalse: [ 'NOP' ]]);			nextPutAll: '----';			print: Date dateAndTimeNow; space;			nextPutAll: (FileDirectory default localNameFor: self imageName);			nextPutAll: ' priorSource: ';			print: LastQuitLogPosition ].		self assureStartupStampLogged.		save ifTrue: [ LastQuitLogPosition := (SourceFiles at: 2) setToEnd; position ].		self logChange: msg.		"Transcript cr; show: msg"	].	Smalltalk processShutDownList: quit.	Cursor write show.	save ifTrue: [resuming := embeddedFlag 					ifTrue: [self snapshotEmbeddedPrimitive] 					ifFalse: [self snapshotPrimitive].  "<-- PC frozen here on image file"				resuming == false "guard against failure" ifTrue:					["Time to reclaim segment files is immediately after a save"					Smalltalk at: #ImageSegment						ifPresent: [:theClass | theClass reclaimObsoleteSegmentFiles]]]		ifFalse: [resuming := false].	quit & (resuming == false) ifTrue: [self quitPrimitive].	Cursor normal show.	Smalltalk setGCParameters.	resuming == true ifTrue: [Smalltalk clearExternalObjects].	Smalltalk processStartUpList: resuming == true.	resuming == true ifTrue:[		self setPlatformPreferences.		self recordStartupStamp].	Project current wakeUpTopWindow.	"Now it's time to raise an error"	resuming == nil ifTrue: [self error:'Failed to write image file (disk full?)'].	^ resuming! !----SNAPSHOT----{2 February 2011 . 4:44:33 pm} SmalltalkLab.image priorSource: 907!----QUIT/NOSAVE----{2 February 2011 . 4:44:38 pm} SmalltalkLab.image priorSource: 3118!----STARTUP----{2 February 2011 . 4:44:40 pm} as /nfs/unixspace/linux/accounts/COURSES/cs208/src/SmalltalkLab.image!----SNAPSHOT----{2 February 2011 . 4:44:53 pm} SmalltalkLab.image priorSource: 3118!----QUIT/NOSAVE----{2 February 2011 . 4:45 pm} SmalltalkLab.image priorSource: 3411!----STARTUP----{2 February 2011 . 4:45:02 pm} as /nfs/unixspace/linux/accounts/COURSES/cs208/src/SmalltalkLab.image!----QUIT/NOSAVE----{2 February 2011 . 4:45:18 pm} SmalltalkLab.image priorSource: 3411!----STARTUP----{1 March 2012 . 3:07:39 pm} as /nfs/unixspace/linux/accounts/student/y/ygg001/csci208/Smalltalk_D/SmalltalkLab.image!Object subclass: #Apple	instanceVariableNames: 'numSeeds variety'	classVariableNames: 'Core Stem'	poolDictionaries: ''	category: 'LabD'!!Apple commentStamp: '<historical>' prior: 0!The Apple class used in the Smalltalk D lab.Instance Variables	numSeeds:		<Object>	variety:		<Object>numSeeds	- the number of seeds in the applevariety	- the variety of the apple!!Apple methodsFor: 'as yet unclassified' stamp: 'LW 10/8/2010 13:22'!admire	"Admire the apple."	^ 'It''s a tasty ' , variety , ' apple. with ', numSeeds asString, ' seeds.'.! !!Apple methodsFor: 'as yet unclassified' stamp: 'LW 10/4/2010 15:26'!bite	"Bite method for an Apple"	^ 'Mmmm'.! !!Apple methodsFor: 'as yet unclassified' stamp: 'LW 10/8/2010 13:20'!doIt: str	"Do the given action to this apple."	^ self perform: str asSymbol.! !!Apple methodsFor: 'as yet unclassified' stamp: 'LW 10/4/2010 15:16'!setNumSeeds: ns variety: v	"Store the input values in the instance variables."	numSeeds := ns.	variety := v.! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!Apple class	instanceVariableNames: ''!!Apple class methodsFor: 'as yet unclassified' stamp: 'LW 10/4/2010 15:17'!numSeeds: ns variety: v	"Create an instance of an Apple and set the instance variables."	^ self new setNumSeeds: ns variety: v.! !!Apple class methodsFor: 'as yet unclassified' stamp: 'SM 3/1/2011 09:20'!variety: v	"Create an instance of an Apple and set the instance variables."	^ self new setNumSeeds: ((0 to: 3) atRandom) variety: v.! !Object subclass: #AppleTree	instanceVariableNames: 'variety'	classVariableNames: ''	poolDictionaries: ''	category: 'LabD'!!AppleTree commentStamp: '<historical>' prior: 0!The AppleTree class used in the Smalltalk D lab.Instance Variables	variety:	<Object>		variety	- the variety of apple made by this tree!!AppleTree methodsFor: 'as yet unclassified' stamp: 'LW 10/8/2010 13:37'!setVariety: v	variety := v.! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!AppleTree class	instanceVariableNames: ''!!AppleTree commentStamp: '<historical>' prior: 33560072!The AppleTree class used in the Smalltalk D lab.!!AppleTree class methodsFor: 'as yet unclassified' stamp: 'SM 3/1/2011 15:37'!variety: v	"Create an apple tree with the variety given as a parameter"	| tree |	tree := self new.	tree setVariety: v.	^ tree.! !Apple subclass: #CrabApple	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'LabD'!!CrabApple commentStamp: '<historical>' prior: 0!The CrabApple class used in the SmalltalkC lab.!!CrabApple methodsFor: 'as yet unclassified' stamp: 'LW 10/4/2010 15:27'!bite	"Bite method for a CrabApple."	^ 'Ugh sour!!'.! !----End fileIn of /nfs/unixspace/linux/accounts/student/y/ygg001/csci208/Smalltalk_D/LabD.st----!----SNAPSHOT----{1 March 2012 . 3:10:41 pm} SmalltalkLab.image priorSource: 3411!!Apple methodsFor: 'as yet unclassified' stamp: 'YG 3/1/2012 15:24'!plant0Seeds	"Plant apple with no seeds"! !!Apple methodsFor: 'as yet unclassified' stamp: 'YG 3/1/2012 15:25' prior: 33561348!plant0Seeds	"Plant apple with no seeds"	^ 'Its a used apple, you get no trees!!'! !!Apple methodsFor: 'as yet unclassified' stamp: 'YG 3/1/2012 15:26'!plant1Seeds	"plant apple with one seed"	^ new AppleTree! !!Apple methodsFor: 'as yet unclassified' stamp: 'YG 3/1/2012 15:29'!plant2Seeds	"plant apple with two seeds"	! !----SNAPSHOT----{1 March 2012 . 3:32:07 pm} SmalltalkLab.image priorSource: 6763!!Apple methodsFor: 'as yet unclassified' stamp: 'YG 3/1/2012 15:36' prior: 33561765!plant2Seeds	"plant apple with two seeds"	| set |		set := new Set.		! !!Apple methodsFor: 'as yet unclassified' stamp: 'YG 3/1/2012 15:36' prior: 33561981!plant2Seeds	"plant apple with two seeds"	| set |		set := new Set.! !!Apple methodsFor: 'as yet unclassified' stamp: 'YG 3/1/2012 15:41' prior: 33562144!plant2Seeds	"plant apple with two seeds"	| set count |		set := new Set.	count := (0 to: 10) atRandom.		! !----SNAPSHOT----{1 March 2012 . 3:43:07 pm} SmalltalkLab.image priorSource: 7380!----SNAPSHOT----{1 March 2012 . 3:43:08 pm} SmalltalkLab.image priorSource: 7986!!Apple methodsFor: 'as yet unclassified' stamp: 'YG 3/1/2012 15:45' prior: 33562304!plant2Seeds	"plant apple with two seeds"	| set amount count |		set := new Set.	amount := (0 to: 10) atRandom.	count := 0.	[count < amount ] whileTrue: [		set add: new AppleTree.		count := count + 1.	].		^ set	! !!Apple methodsFor: 'as yet unclassified' stamp: 'YG 3/1/2012 15:50'!plant3Seeds	"plant Apple with three seeds"	| set setTree number count |	set := new Set.	setTree := new Set.	number := ((0 to: 10) atRandom).		count := 0.	[ count < number ] whileTrue: [		setTree add: new AppleTree.		count := count + 1.	].	count := 0.	[ count < number ] whileTrue: [		set add: setTree.		count := count + 1.	].	^ set		! !----SNAPSHOT----{1 March 2012 . 3:51:41 pm} SmalltalkLab.image priorSource: 8069!!Apple methodsFor: 'as yet unclassified' stamp: 'YG 3/1/2012 15:52'!plant	"reflectively calls the correct planting method based on the number of seeds in the Apple, sets the Apples seed count to 0, and returns the results of the planting."! !----SNAPSHOT----{1 March 2012 . 3:52:13 pm} SmalltalkLab.image priorSource: 8891!----SNAPSHOT----{1 March 2012 . 3:52:14 pm} SmalltalkLab.image priorSource: 9220!a := Apple variety: 'Gala'.!a admire.!a admire.!a plant0Seeds.!!Apple methodsFor: 'as yet unclassified' stamp: 'YG 3/1/2012 15:58' prior: 33561634!plant1Seeds	"plant apple with one seed"	| tree |	tree := new AppleTree.		^ tree! !!Apple methodsFor: 'as yet unclassified' stamp: 'YG 3/1/2012 16:00' prior: 33563975!plant1Seeds	"plant apple with one seed"	^ new AppleTree variety: 'Gala'! !a := Apple variety: 'Gala'.!a plant0Seeds.!a := Apple variety: 'Gala'.!!Apple methodsFor: 'as yet unclassified' stamp: 'YG 3/1/2012 16:03' prior: 33564150!plant1Seeds	"plant apple with one seed"		| tree |		tree := new AppleTree variety: 'Gala'.	^ tree! !a := Apple variety: 'Gala'.!!Apple methodsFor: 'as yet unclassified' stamp: 'YG 3/1/2012 16:03' prior: 33564390!plant1Seeds	"plant apple with one seed"		| tree |		tree := AppleTree new variety: 'Gala'.	^ tree! !a := Apple variety: 'Gala'.!!Apple methodsFor: 'as yet unclassified' stamp: 'YG 3/1/2012 16:05' prior: 33564612!plant1Seeds	"plant apple with one seed"		| tree |		tree := AppleTree variety: 'Gala'.	^ tree! !!Apple methodsFor: 'as yet unclassified' stamp: 'YG 3/1/2012 16:06' prior: 33564834!plant1Seeds	"plant apple with one seed"		| tree |		tree := AppleTree variety: 'Gala'.	^ tree! !a := Apple variety: 'Gala'.!a plant0Seeds.!a plant1Seeds.!!Apple methodsFor: 'as yet unclassified' stamp: 'YG 3/1/2012 16:07' prior: 33565022!plant1Seeds	"plant apple with one seed"		| tree |		tree := AppleTree variety: 'Gala'.	^ tree! !a plant1Seeds.!a := Apple variety: 'Gala'.!a plant1Seeds.!!Apple methodsFor: 'as yet unclassified' stamp: 'YG 3/1/2012 16:07' prior: 33562670!plant2Seeds	"plant apple with two seeds"	| set amount count |		set := Set.	amount := (0 to: 10) atRandom.	count := 0.	[count < amount ] whileTrue: [		set add: new AppleTree.		count := count + 1.	].		^ set	! !----SNAPSHOT----{1 March 2012 . 4:09:26 pm} SmalltalkLab.image priorSource: 9303!!Apple methodsFor: 'as yet unclassified' stamp: 'YG 3/1/2012 16:10' prior: 33565526!plant2Seeds	"plant apple with two seeds"	| set amount count |		set := Set new.	amount := (0 to: 10) atRandom.	count := 0.	[count < amount ] whileTrue: [		set add: new AppleTree.		count := count + 1.	].		^ set	! !!Apple methodsFor: 'as yet unclassified' stamp: 'YG 3/1/2012 16:10' prior: 33562966!plant3Seeds	"plant Apple with three seeds"	| set setTree number count |	set := Set new.	setTree := new Set.	number := ((0 to: 10) atRandom).		count := 0.	[ count < number ] whileTrue: [		setTree add: new AppleTree.		count := count + 1.	].	count := 0.	[ count < number ] whileTrue: [		set add: setTree.		count := count + 1.	].	^ set		! !!Apple methodsFor: 'as yet unclassified' stamp: 'YG 3/1/2012 16:10' prior: 33566229!plant3Seeds	"plant Apple with three seeds"	| set setTree number count |	set := Set new.	setTree := Set new.	number := ((0 to: 10) atRandom).		count := 0.	[ count < number ] whileTrue: [		setTree add: new AppleTree.		count := count + 1.	].	count := 0.	[ count < number ] whileTrue: [		set add: setTree.		count := count + 1.	].	^ set		! !!Apple methodsFor: 'as yet unclassified' stamp: 'YG 3/1/2012 16:10' prior: 33565917!plant2Seeds	"plant apple with two seeds"	| set amount count |		set := Set new.	amount := ((0 to: 10) atRandom).	count := 0.	[count < amount ] whileTrue: [		set add: new AppleTree.		count := count + 1.	].		^ set	! !!Apple methodsFor: 'as yet unclassified' stamp: 'YG 3/1/2012 16:10' prior: 33567115!plant2Seeds	"plant apple with two seeds"	| set amount count |		set := Set new.	amount := ((0 to: 10) atRandom).	count := 0.	[count < amount ] whileTrue: [		set add: new AppleTree.		count := count + 1.	].		^ set	! !a := Apple variety: 'Gala'.!!Apple methodsFor: 'as yet unclassified' stamp: 'YG 3/1/2012 16:11' prior: 33567429!plant2Seeds	"plant apple with two seeds"	| set amount count |		set := Set new.	amount := ((0 to: 10) atRandom).	count := 0.	[count < amount ] whileTrue: [		set add: AppleTree new.		count := count + 1.	].		^ set	! !!Apple methodsFor: 'as yet unclassified' stamp: 'YG 3/1/2012 16:11' prior: 33566672!plant3Seeds	"plant Apple with three seeds"	| set setTree number count |	set := Set new.	setTree := Set new.	number := ((0 to: 10) atRandom).		count := 0.	[ count < number ] whileTrue: [		setTree add: AppleTree new.		count := count + 1.	].	count := 0.	[ count < number ] whileTrue: [		set add: setTree.		count := count + 1.	].	^ set		! !a := Apple variety: 'Gala'.!a plant2Seeds.!a plant3Seeds. !!Apple methodsFor: 'as yet unclassified' stamp: 'YG 3/1/2012 16:16' prior: 33568087!plant3Seeds	"plant Apple with three seeds"	| set setTree number count countSet|	set := Set new.	number := ((0 to: 10) atRandom).	countSet := 0.	count := 0.		[ countSet < number ] whileTrue: [		count := 0.		setTree := Set new.		[ count < number ] whileTrue: [			setTree add: AppleTree new.			count := count + 1.		].		set add: setTree.		countSet := countSet + 1.	].	^ set		! !a := Apple variety: 'Gala'.!a plant3Seeds. !a plant3Seeds.  !a plant3Seeds.  !a plant3Seeds.  !a plant3Seeds.  !!Apple methodsFor: 'as yet unclassified' stamp: 'YG 3/1/2012 16:19' prior: 33563476!plant	"reflectively calls the correct planting method based on the number of seeds in the Apple, sets the Apples seed count to 0, and returns the results of the planting."! !!Apple methodsFor: 'as yet unclassified' stamp: 'YG 3/1/2012 16:22' prior: 33569200!plant	"reflectively calls the correct planting method based on the number of seeds in the Apple, sets the Apples seed count to 0, and returns the results of the planting."	^ self perform: ('plant', numSeeds asString, 'Seeds') asSymbol! !a := Apple variety: 'Gala'.!a admire.!a plant. !a := Apple variety: 'Gala'.!'It''s a tasty Gala apple. with 3 seeds.'!a plant.  !'It''s a tasty Gala apple. with 3 seeds.'!a admire.  !a := Apple variety: 'Gala'.!a admire.  !a plant.  !a := Apple variety: 'Gala'.!a admire.  !a plant.  !a := Apple variety: 'Gala'.!a admire.  !a bite. !dict := a class methodDict. !dict := a class methodDict. !methodBite := dict at: #bite.!methodAdmire := dict at: #admire.!dict at: #bite put: methodAdmire.!dict at: #admire put: methodBite.!a admire.!a bite. !----SNAPSHOT----{1 March 2012 . 4:28:38 pm} SmalltalkLab.image priorSource: 11316!a := Apple variety: 'Gala'.!a admire.  !a admire.  !a bite. !dict := a class methodDict.!methodBite := dict at: #bite.!methodAdmire := dict at: #admire.!dict at: #bite put: methodAdmire.!dict at: #admire put: methodBite.!a admire.!a bite.!!Apple methodsFor: 'as yet unclassified' stamp: 'YG 3/1/2012 16:33'!appreciate	"A string with the output of the variety."! !!Apple methodsFor: 'as yet unclassified' stamp: 'YG 3/1/2012 16:34' prior: 33570710!appreciate	"A string with the output of the variety."		^ 'What a nice ', variety asString, ' Tree'.! !!Apple methodsFor: 'as yet unclassified' stamp: 'YG 3/1/2012 16:34' prior: 33570854!appreciate	"A string with the output of the variety."		^ 'What a nice ', variety asString, ' apple'.! !Apple removeSelector: #appreciate!!AppleTree methodsFor: 'as yet unclassified' stamp: 'YG 3/1/2012 16:35'!appreciate	"return a string with variety information."! !----SNAPSHOT----{1 March 2012 . 4:35:43 pm} SmalltalkLab.image priorSource: 15863!!AppleTree methodsFor: 'as yet unclassified' stamp: 'YG 3/1/2012 16:36' prior: 33571261!appreciate	"return a string with variety information."	^ 'What a nice ', variety asString, ' tree it is!!'! !!AppleTree methodsFor: 'as yet unclassified' stamp: 'YG 3/1/2012 16:37'!adore	"return a string with the variety information."	^ 'How beautiful this ', variety asString, ' is!!'.! !AppleTree class	instanceVariableNames: 'MethodAdore MethodAppreciate'!!AppleTree class methodsFor: 'as yet unclassified' stamp: 'YG 3/1/2012 16:42'!setup	"sets the two class variables to the methods."		| dict |		dict := self class methodDict.	MethodAdore := dict at: #adore.	MethodAppreciate := dict at: #appreciate.		dict at: #admire put: #MethodAdore.! !!AppleTree class methodsFor: 'as yet unclassified' stamp: 'YG 3/1/2012 16:42' prior: 33560612!variety: v	"Create an apple tree with the variety given as a parameter"	| tree dict |	tree := self new.	tree setVariety: v.	^ tree.! !!AppleTree class methodsFor: 'as yet unclassified' stamp: 'YG 3/1/2012 16:43' prior: 33572258!variety: v	"Create an apple tree with the variety given as a parameter"	| tree dict |	dict := self class methodDict.	MethodAdore := dict at: #adore.	MethodAppreciate := dict at: #appreciate.		dict at: #admire put: #MethodAdore.		tree := self new.	tree setVariety: v.	^ tree.! !!AppleTree class methodsFor: 'as yet unclassified' stamp: 'YG 3/1/2012 16:45'!swap	"swaps the code behind the admire method back and forth between adore and appreciate."	| dict |	dict := self class methodDict.	MethodAdore := dict at: #adore.	MethodAppreciate := dict at: #appreciate.		dict at: #admire put: #MethodAdore.! !AppleTree class	instanceVariableNames: 'MethodAdore MethodAppreciate Condition'!!AppleTree class methodsFor: 'as yet unclassified' stamp: 'YG 3/1/2012 16:46' prior: 33571945!setup	"sets the two class variables to the methods."		| dict |		dict := self class methodDict.	MethodAdore := dict at: #adore.	MethodAppreciate := dict at: #appreciate.		dict at: #admire put: #MethodAdore.	Condition := 0.! !!AppleTree class methodsFor: 'as yet unclassified' stamp: 'YG 3/1/2012 16:47' prior: 33572493!variety: v	"Create an apple tree with the variety given as a parameter"	| tree dict |	dict := self class methodDict.	MethodAdore := dict at: #adore.	MethodAppreciate := dict at: #appreciate.		dict at: #admire put: #MethodAdore.	Condition := 0.		tree := self new.	tree setVariety: v.	^ tree.! !!AppleTree class methodsFor: 'as yet unclassified' stamp: 'YG 3/1/2012 16:49' prior: 33572861!swap	"swaps the code behind the admire method back and forth between adore and appreciate."	| dict |	dict := self class methodDict.		(Condition = 0) ifTrue: [		dict at: #admire put: MethodAppreciate.		Condition := 1.	] ifFalse: [		dict at: #admire put: MethodAdore.		Condition := 0.	].! !!AppleTree class methodsFor: 'as yet unclassified' stamp: 'YG 3/1/2012 16:50' prior: 33573623!variety: v	"Create an apple tree with the variety given as a parameter"	| tree dict |	dict := self class methodDict.	MethodAdore := dict at: #adore.	MethodAppreciate := dict at: #appreciate.		dict at: #admire put: MethodAdore.	Condition := 0.		tree := self new.	tree setVariety: v.	^ tree.! !!AppleTree class methodsFor: 'as yet unclassified' stamp: 'YG 3/1/2012 16:50' prior: 33573293!setup	"sets the two class variables to the methods."		| dict |		dict := self class methodDict.	MethodAdore := dict at: #adore.	MethodAppreciate := dict at: #appreciate.		dict at: #admire put: MethodAdore.	Condition := 0.! !!AppleTree class methodsFor: 'as yet unclassified' stamp: 'YG 3/1/2012 16:58' prior: 33574420!variety: v	"Create an apple tree with the variety given as a parameter"	| tree |	self setup.		tree := self new.	tree setVariety: v.	^ tree.! !!AppleTree class methodsFor: 'as yet unclassified' stamp: 'YG 3/1/2012 16:58' prior: 33575149!variety: v	"Create an apple tree with the variety given as a parameter"	| tree |	AppleTree setup.		tree := self new.	tree setVariety: v.	^ tree.! !!AppleTree class methodsFor: 'as yet unclassified' stamp: 'YG 3/1/2012 16:59' prior: 33575394!variety: v	"Create an apple tree with the variety given as a parameter"	| tree |		tree := self new.	tree setVariety: v.	^ tree.! !tree := AppleTree variety: 'Gala'.!tree := AppleTree variety: 'Gala'.!tree := AppleTree variety: 'Gala'.!tree := AppleTree variety: 'Gala'.!!AppleTree class methodsFor: 'as yet unclassified' stamp: 'YG 3/1/2012 17:01' prior: 33574820!setup	"sets the two class variables to the methods."		| dict |		dict := AppleTree class methodDict.	MethodAdore := dict at: #adore.	MethodAppreciate := dict at: #appreciate.		dict at: #admire put: MethodAdore.	Condition := 0.! !tree := AppleTree variety: 'Gala'.!tree := AppleTree variety: 'Gala'.!tree adore.!tree appreciate. !dict := tree class methodDict.!dict := tree class methodDict.!methodBite := dict at: #adore.!methodBite := dict at: #adore.!tree appreciate.  !tree appreciate.  !tree appreciate.  !tree appreciate.  !tree appreciate.  !tree appreciate.  !tree appreciate.  !dict!!AppleTree class methodsFor: 'as yet unclassified' stamp: 'YG 3/1/2012 17:07' prior: 33576024!setup	"sets the two class variables to the methods."		| dict |		dict := methodDict.	MethodAdore := dict at: #adore.	MethodAppreciate := dict at: #appreciate.		dict at: #admire put: MethodAdore.	Condition := 0.! !tree := AppleTree variety: 'Gala'.!tree class setup.!tree class setup.!tree class setup.!tree class setup.!!AppleTree class methodsFor: 'as yet unclassified' stamp: 'YG 3/1/2012 17:09' prior: 33575644!variety: v	"Create an apple tree with the variety given as a parameter"	| tree |		tree := self new.		tree class setup.	tree setVariety: v.	^ tree.! !tree := AppleTree variety: 'Gala'.!tree := AppleTree variety: 'Gala'.!tree := AppleTree variety: 'Gala'.!tree := AppleTree variety: 'Gala'.!tree := AppleTree variety: 'Gala'.!tree := AppleTree variety: 'Gala'.!tree := AppleTree variety: 'Gala'.!tree := AppleTree variety: 'Gala'.!tree := AppleTree variety: 'Gala'.!tree := AppleTree variety: 'Gala'.!tree := AppleTree variety: 'Gala'.!tree := AppleTree variety: 'Gala'.!tree := AppleTree variety: 'Gala'.!tree := AppleTree variety: 'Gala'.!tree := AppleTree variety: 'Gala'.!tree := AppleTree variety: 'Gala'.!tree := AppleTree variety: 'Gala'.!tree := AppleTree variety: 'Gala'.!tree admire.!tree class swap.!tree admire.!tree class swap.!tree class swap.!tree class swap.!tree class swap.!tree class swap.!tree admire.!!AppleTree class methodsFor: 'as yet unclassified' stamp: 'YG 3/1/2012 17:10' prior: 33574024!swap	"swaps the code behind the admire method back and forth between adore and appreciate."	| dict |	dict := methodDict.		(Condition = 0) ifTrue: [		dict at: #admire put: MethodAppreciate.		Condition := 1.	] ifFalse: [		dict at: #admire put: MethodAdore.		Condition := 0.	].! !tree class swap.!tree admire.!----QUIT----{1 March 2012 . 5:12:48 pm} SmalltalkLab.image priorSource: 16889!----STARTUP----{1 March 2012 . 5:12:54 pm} as /nfs/unixspace/linux/accounts/student/y/ygg001/csci208/Smalltalk_D/SmalltalkLab.image!Smalltalk removeClassNamed: #CrabApple!Smalltalk removeClassNamed: #AppleTree!Smalltalk removeClassNamed: #Apple!Object subclass: #Apple	instanceVariableNames: 'numSeeds variety new'	classVariableNames: 'Core Stem'	poolDictionaries: ''	category: 'LabD'!!Apple commentStamp: '<historical>' prior: 0!The Apple class used in the Smalltalk D lab.Instance Variables	numSeeds:		<Object>	variety:		<Object>numSeeds	- the number of seeds in the applevariety	- the variety of the apple!!Apple methodsFor: 'as yet unclassified' stamp: 'LW 10/8/2010 13:22'!admire	"Admire the apple."	^ 'It''s a tasty ' , variety , ' apple. with ', numSeeds asString, ' seeds.'.! !!Apple methodsFor: 'as yet unclassified' stamp: 'LW 10/4/2010 15:26'!bite	"Bite method for an Apple"	^ 'Mmmm'.! !!Apple methodsFor: 'as yet unclassified' stamp: 'LW 10/8/2010 13:20'!doIt: str	"Do the given action to this apple."	^ self perform: str asSymbol.! !!Apple methodsFor: 'as yet unclassified' stamp: 'YG 3/1/2012 16:22'!plant	"reflectively calls the correct planting method based on the number of seeds in the Apple, sets the Apples seed count to 0, and returns the results of the planting."	^ self perform: ('plant', numSeeds asString, 'Seeds') asSymbol! !!Apple methodsFor: 'as yet unclassified' stamp: 'YG 3/1/2012 15:25'!plant0Seeds	"Plant apple with no seeds"	^ 'Its a used apple, you get no trees!!'! !!Apple methodsFor: 'as yet unclassified' stamp: 'YG 3/1/2012 16:07'!plant1Seeds	"plant apple with one seed"		| tree |		tree := AppleTree variety: 'Gala'.	^ tree! !!Apple methodsFor: 'as yet unclassified' stamp: 'YG 3/1/2012 16:11'!plant2Seeds	"plant apple with two seeds"	| set amount count |		set := Set new.	amount := ((0 to: 10) atRandom).	count := 0.	[count < amount ] whileTrue: [		set add: AppleTree new.		count := count + 1.	].		^ set	! !!Apple methodsFor: 'as yet unclassified' stamp: 'YG 3/1/2012 16:16'!plant3Seeds	"plant Apple with three seeds"	| set setTree number count countSet|	set := Set new.	number := ((0 to: 10) atRandom).	countSet := 0.	count := 0.		[ countSet < number ] whileTrue: [		count := 0.		setTree := Set new.		[ count < number ] whileTrue: [			setTree add: AppleTree new.			count := count + 1.		].		set add: setTree.		countSet := countSet + 1.	].	^ set		! !!Apple methodsFor: 'as yet unclassified' stamp: 'LW 10/4/2010 15:16'!setNumSeeds: ns variety: v	"Store the input values in the instance variables."	numSeeds := ns.	variety := v.! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!Apple class	instanceVariableNames: ''!!Apple class methodsFor: 'as yet unclassified' stamp: 'LW 10/4/2010 15:17'!numSeeds: ns variety: v	"Create an instance of an Apple and set the instance variables."	^ self new setNumSeeds: ns variety: v.! !!Apple class methodsFor: 'as yet unclassified' stamp: 'SM 3/1/2011 09:20'!variety: v	"Create an instance of an Apple and set the instance variables."	^ self new setNumSeeds: ((0 to: 3) atRandom) variety: v.! !Object subclass: #AppleTree	instanceVariableNames: 'variety'	classVariableNames: ''	poolDictionaries: ''	category: 'LabD'!!AppleTree commentStamp: '<historical>' prior: 0!The AppleTree class used in the Smalltalk D lab.!!AppleTree methodsFor: 'as yet unclassified' stamp: 'YG 3/1/2012 16:37'!adore	"return a string with the variety information."	^ 'How beautiful this ', variety asString, ' is!!'.! !!AppleTree methodsFor: 'as yet unclassified' stamp: 'YG 3/1/2012 16:36'!appreciate	"return a string with variety information."	^ 'What a nice ', variety asString, ' tree it is!!'! !!AppleTree methodsFor: 'as yet unclassified' stamp: 'LW 10/8/2010 13:37'!setVariety: v	variety := v.! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!AppleTree class	instanceVariableNames: 'MethodAdore MethodAppreciate Condition'!!AppleTree class methodsFor: 'as yet unclassified' stamp: 'YG 3/1/2012 17:07'!setup	"sets the two class variables to the methods."		| dict |		dict := methodDict.	MethodAdore := dict at: #adore.	MethodAppreciate := dict at: #appreciate.		dict at: #admire put: MethodAdore.	Condition := 0.! !!AppleTree class methodsFor: 'as yet unclassified' stamp: 'YG 3/1/2012 17:10'!swap	"swaps the code behind the admire method back and forth between adore and appreciate."	| dict |	dict := methodDict.		(Condition = 0) ifTrue: [		dict at: #admire put: MethodAppreciate.		Condition := 1.	] ifFalse: [		dict at: #admire put: MethodAdore.		Condition := 0.	].! !!AppleTree class methodsFor: 'as yet unclassified' stamp: 'YG 3/1/2012 17:09'!variety: v	"Create an apple tree with the variety given as a parameter"	| tree |		tree := self new.		tree class setup.	tree setVariety: v.	^ tree.! !Apple subclass: #CrabApple	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'LabD'!!CrabApple commentStamp: '<historical>' prior: 0!The CrabApple class used in the SmalltalkC lab.!!CrabApple methodsFor: 'as yet unclassified' stamp: 'LW 10/4/2010 15:27'!bite	"Bite method for a CrabApple."	^ 'Ugh sour!!'.! !----End fileIn of /nfs/unixspace/linux/accounts/student/y/ygg001/csci208/Smalltalk_D/SmallTalk_D.st----!a := Apple variety: 'Gala'.!a := Apple variety: 'Gala'.!a admire.!a bite.!----QUIT----{1 March 2012 . 5:33:34 pm} SmalltalkLab.image priorSource: 24156!