Yifan Ge
CSCI 208 Homework 4
4/2/2012

Question 1:
In java, everything is passed by (value). Because Objects are actually references to heap memory, it appears as if they are passed by (reference).

Question 2:
(a)
#include<iostream>
using namespace std;
void foo(int* x) {x=2;}

int main() {
    int a = 5;
    int* z = &a;
    foo(z);
    cout << z << endl;
}

(b)
#include<iostream>
using namespace std;
void foo(int* x) {x=2;}

int main() {
    int z = 5;
    foo(&z);
    cout << z << endl;
}

Question 3:
(a)
4
3
36

(b)
3
4
4
36

(c)
This is because the evaluation strategies are different. 
So the evaluation order are different.

Question 4:
It's possible to pass an int by reference in Java.
We can use Int object to pass an int as reference in Java.

Question 5:
(a)
Smalltalk uses short circuit evaluation.
Method:
trueAndPrint
	Transcript show: 'not short circuit!'.
	^ true
Input:
x := Homework4 new.
b := (1<2) or: [x Homework4].(Ctrl+p)true
Output:
(Nothing)

(b)
Since we can't store anything to the parameter, Smalltalk 
is passing by value.

evaluationTest: x
	"Test evaluation strategy"
	 Cannot store into ->x := x + self
        ^ x

(c)
Smalltalk has both infix and postfix. 
For function calls, it uses postfix.
Smalltalk's operators are infix and left-associative.
3+4*5. 35

(d)
Smalltalk allow both procedures and functions.
Procedures may have side effect. But functions don't.
Function:
b := (x true).  true (output: n/a)

Procedure:
b := (x trueAndPrint).  true (output: side effect)

(e)
Smalltalk allow both statements and expressions.
It does not differentiate expressions and statement.
Expression:
b := 2>1 true (2>1 expression)

Statement:
a := 1.
b := 2.
c := a +b. 3
