'From Squeak4.1 of 17 April 2010 [latest update: #9957] on 17 April 2010 at 5:22:05 pm'!----STARTUP----{17 April 2010 . 5:21:54 pm} as C:\Squeak\4.0\4.1-final\Squeak4.1.image!Smalltalk appendChangesTo: 'SqueakV41.sources'.!----QUIT----{17 April 2010 . 5:22:11 pm} Squeak4.1.image priorSource: 89!----STARTUP----{27 January 2011 . 3:18:14 pm} as /nfs/unixspace/linux/accounts/COURSES/cs208/src/Squeak4.1.image!----QUIT/NOSAVE----{27 January 2011 . 3:18:22 pm} Squeak4.1.image priorSource: 229!----STARTUP----{27 January 2011 . 5:03:41 pm} as /nfs/unixspace/linux/accounts/COURSES/cs208/src/Squeak4.1.image!----SNAPSHOT----{27 January 2011 . 5:21:57 pm} Squeak4.2.image priorSource: 229!----QUIT/NOSAVE----{27 January 2011 . 5:22:26 pm} Squeak4.2.image priorSource: 621!----STARTUP----{2 February 2011 . 4:42:37 pm} as /nfs/unixspace/linux/accounts/COURSES/cs208/src/SmalltalkLab.image!----SNAPSHOT----{2 February 2011 . 4:43:01 pm} SmalltalkLab.image priorSource: 621!!SmalltalkImage methodsFor: 'snapshot and quit' stamp: 'SM 2/2/2011 16:44' prior: 58481809!snapshot: save andQuit: quit embedded: embeddedFlag	"Mark the changes file and close all files as part of #processShutdownList.	If save is true, save the current state of this Smalltalk in the image file.	If quit is true, then exit to the outer OS shell.	The latter part of this method runs when resuming a previously saved image. This resume logic checks for a document file to process when starting up."	| resuming msg |	Object flushDependents.	Object flushEvents.	(SourceFiles at: 2) ifNotNil:[		msg := String streamContents: [ :s |			s nextPutAll: '----';			nextPutAll: (save ifTrue: [ quit ifTrue: [ 'QUIT' ] ifFalse: [ 'SNAPSHOT' ] ]							ifFalse: [quit ifTrue: [ 'QUIT/NOSAVE' ] ifFalse: [ 'NOP' ]]);			nextPutAll: '----';			print: Date dateAndTimeNow; space;			nextPutAll: (FileDirectory default localNameFor: self imageName);			nextPutAll: ' priorSource: ';			print: LastQuitLogPosition ].		self assureStartupStampLogged.		save ifTrue: [ LastQuitLogPosition := (SourceFiles at: 2) setToEnd; position ].		self logChange: msg.		"Transcript cr; show: msg"	].	Smalltalk processShutDownList: quit.	Cursor write show.	save ifTrue: [resuming := embeddedFlag 					ifTrue: [self snapshotEmbeddedPrimitive] 					ifFalse: [self snapshotPrimitive].  "<-- PC frozen here on image file"				resuming == false "guard against failure" ifTrue:					["Time to reclaim segment files is immediately after a save"					Smalltalk at: #ImageSegment						ifPresent: [:theClass | theClass reclaimObsoleteSegmentFiles]]]		ifFalse: [resuming := false].	quit & (resuming == false) ifTrue: [self quitPrimitive].	Cursor normal show.	Smalltalk setGCParameters.	resuming == true ifTrue: [Smalltalk clearExternalObjects].	Smalltalk processStartUpList: resuming == true.	resuming == true ifTrue:[		self setPlatformPreferences.		self recordStartupStamp].	Project current wakeUpTopWindow.	"Now it's time to raise an error"	resuming == nil ifTrue: [self error:'Failed to write image file (disk full?)'].	^ resuming! !----SNAPSHOT----{2 February 2011 . 4:44:33 pm} SmalltalkLab.image priorSource: 907!----QUIT/NOSAVE----{2 February 2011 . 4:44:38 pm} SmalltalkLab.image priorSource: 3118!----STARTUP----{2 February 2011 . 4:44:40 pm} as /nfs/unixspace/linux/accounts/COURSES/cs208/src/SmalltalkLab.image!----SNAPSHOT----{2 February 2011 . 4:44:53 pm} SmalltalkLab.image priorSource: 3118!----QUIT/NOSAVE----{2 February 2011 . 4:45 pm} SmalltalkLab.image priorSource: 3411!----STARTUP----{2 February 2011 . 4:45:02 pm} as /nfs/unixspace/linux/accounts/COURSES/cs208/src/SmalltalkLab.image!----QUIT/NOSAVE----{2 February 2011 . 4:45:18 pm} SmalltalkLab.image priorSource: 3411!----STARTUP----{16 February 2012 . 3:08:38 pm} as /nfs/unixspace/linux/accounts/student/y/ygg001/csci208/Smalltalk_C/SmalltalkLab.image!Object subclass: #Apple	instanceVariableNames: 'numSeeds variety'	classVariableNames: 'Core Stem'	poolDictionaries: ''	category: 'LabC'!!Apple commentStamp: 'SM 2/15/2011 23:36' prior: 0!The Apple class used in the Smalltalk C lab.Instance Variables	numSeeds:		<Object>	variety:		<Object>numSeeds	- the number of seeds in the applevariety	- the varietal of the apple!!Apple methodsFor: 'describing' stamp: 'SM 2/15/2011 23:34'!admire	"Admire the apply."	^ 'It''s a tasty ', variety, ' apple.'! !!Apple methodsFor: 'updating' stamp: 'SM 2/15/2011 23:35'!setNumSeeds: ns variety: v	"Store the input values in the instance variables."	numSeeds := ns.	variety := v! !!Apple methodsFor: 'eating' stamp: 'SM 2/15/2011 23:34'!bite	"Bite method for an Apple"	^ 'Mmmm'! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!Apple class	instanceVariableNames: ''!!Apple class methodsFor: 'object creation' stamp: 'SM 2/15/2011 23:41'!numSeeds: ns variety: v	"Create an instance of an Apple and set the instance variables."	^ self new setNumSeeds: ns variety: v! !!Apple class methodsFor: 'object creation' stamp: 'SM 2/15/2011 23:42'!variety: v	"Create an instance of an Apple and set the instance variables."	^ self new setNumSeeds: 5 variety: v.! !Apple subclass: #CrabApple	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'LabC'!!CrabApple commentStamp: 'SM 2/15/2011 23:40' prior: 0!The CrabApple class used in the Smalltalk C lab.!!CrabApple methodsFor: 'eating' stamp: 'SM 2/15/2011 23:37'!bite	"Bite method for a CrabApple."	^ 'Ugh sour!!'! !----End fileIn of /nfs/unixspace/linux/accounts/student/y/ygg001/csci208/Smalltalk_C/LabC.st----!----SNAPSHOT----{16 February 2012 . 3:13:35 pm} SmalltalkLab.image priorSource: 3411!Object subclass: #Apple	instanceVariableNames: 'numSeeds variety generator'	classVariableNames: 'Core Stem'	poolDictionaries: ''	category: 'LabC'!Object subclass: #Apple	instanceVariableNames: 'numSeeds variety'	classVariableNames: 'Core Stem'	poolDictionaries: ''	category: 'LabC'!Apple class	instanceVariableNames: 'generator'!!Apple class methodsFor: 'object creation' stamp: 'YG 2/16/2012 15:52'!initialize	"Sets generator and then calls the super initialize method."		|  |! !!Apple class methodsFor: 'object creation' stamp: 'YG 2/16/2012 15:53' prior: 33560598!initialize	"Sets generator and then calls the super initialize method."		! !!Apple class methodsFor: 'object creation' stamp: 'YG 2/16/2012 15:57' prior: 33560770!initialize	"Sets generator and then calls the super initialize method."		generator := Random new.	super initialize	! !!Apple class methodsFor: 'object creation' stamp: 'YG 2/16/2012 16:02'!random	"Uses random numbers to set thenumber of seeds and the apple variety."		|  |	generator ! !!Apple class methodsFor: 'object creation' stamp: 'YG 2/16/2012 16:09' prior: 33561134!random	"Uses random numbers to set thenumber of seeds and the apple variety."		| seeds var index|	seeds := generator nextInt: 10.	var := #(King Queen Prince Princess).	index := generator nextInt: 4.		! !----SNAPSHOT----{16 February 2012 . 4:09:54 pm} SmalltalkLab.image priorSource: 5662!!Apple class methodsFor: 'object creation' stamp: 'YG 2/16/2012 16:10' prior: 33561324!random	"Uses random numbers to set thenumber of seeds and the apple variety."		| seeds var index|	seeds := generator nextInt: 10.	var := #(King Queen Prince Princess).	index := generator nextInt: 4.! !----SNAPSHOT----{16 February 2012 . 4:10:05 pm} SmalltalkLab.image priorSource: 7103!----SNAPSHOT----{16 February 2012 . 4:10:06 pm} SmalltalkLab.image priorSource: 7487!!Apple class methodsFor: 'object creation' stamp: 'YG 2/16/2012 16:11' prior: 33561711!random	"Uses random numbers to set thenumber of seeds and the apple variety."		| seeds var index|	seeds := generator nextInt: 10.	var := #(King Queen Prince Princess).	index := generator nextInt: 4.! !!Apple class methodsFor: 'object creation' stamp: 'YG 2/16/2012 16:13' prior: 33562182!random	"Uses random numbers to set thenumber of seeds and the apple variety."		| seeds var index name|	seeds := generator nextInt: 10.	var := #(King Queen Prince Princess).	index := generator nextInt: 4.	^self new setNumSeeds: seeds variety: var @index.! !!Apple class methodsFor: 'object creation' stamp: 'YG 2/16/2012 16:13' prior: 33562480!random	"Uses random numbers to set thenumber of seeds and the apple variety."		| seeds var index name|	seeds := generator nextInt: 10.	var := #(King Queen Prince Princess).	index := generator nextInt: 4.	^self new setNumSeeds: seeds variety: var @ index.! !!Apple class methodsFor: 'object creation' stamp: 'YG 2/16/2012 16:13' prior: 33562833!random	"Uses random numbers to set thenumber of seeds and the apple variety."		| seeds var index|	seeds := generator nextInt: 10.	var := #(King Queen Prince Princess).	index := generator nextInt: 4.	^self new setNumSeeds: seeds variety: var @ index.! !!Apple class methodsFor: 'object creation' stamp: 'YG 2/16/2012 16:14' prior: 33563187!random	"Uses random numbers to set thenumber of seeds and the apple variety."		| seeds var index|	seeds := generator nextInt: 10.	var := #(King Queen Prince Princess).	index := generator nextInt: 4.	^self new setNumSeeds: seeds variety: var @ (index-1).! !Apple initialize.!CrabApple initialize.!!Apple class methodsFor: 'object creation' stamp: 'YG 2/16/2012 16:15' prior: 33563536!random	"Uses random numbers to set thenumber of seeds and the apple variety."		| seeds var index|	seeds := generator nextInt: 10.	var := #(King Queen Prince Princess).	index := generator nextInt: 4.	^self new setNumSeeds: seeds variety: var @ index.! !!Apple class methodsFor: 'object creation' stamp: 'YG 2/16/2012 16:17' prior: 33563933!random	"Uses random numbers to set thenumber of seeds and the apple variety."		| seeds var index|	seeds := generator nextInt: 10.	var := #(King Queen Prince Princess).	index := generator nextInt: 4.	^self new setNumSeeds: seeds variety: var @ index.! !!Apple class methodsFor: 'object creation' stamp: 'YG 2/16/2012 16:19' prior: 33564282!random	"Uses random numbers to set thenumber of seeds and the apple variety."		| seeds var index|	seeds := generator nextInt: 10.	var := #(King Queen Prince Princess).	index := generator nextInt: 4.	^self new setNumSeeds: seeds variety: (var at: index).! !a := Apple random.!!Apple methodsFor: 'describing' stamp: 'YG 2/16/2012 16:20'!getSeeds	"Returns the number of seeds."	^self! !!Apple methodsFor: 'describing' stamp: 'YG 2/16/2012 16:21' prior: 33564978!getSeeds	"Returns the number of seeds."	^numSeeds! !a admire.!a getSeeds. !a := Apple random.!a admire.!a getSeeds.!----SNAPSHOT----{16 February 2012 . 4:22:36 pm} SmalltalkLab.image priorSource: 7574!!Apple methodsFor: 'updating' stamp: 'YG 2/16/2012 16:27'!setStem: stem	"Set the stem of the apple"! !!Apple methodsFor: 'updating' stamp: 'YG 2/16/2012 16:30' prior: 33565383!setStem: stem	"Set the stem of the apple"	Stem := Color fromString: stem! !!Apple methodsFor: 'describing' stamp: 'YG 2/16/2012 16:30'!getStem	"Get the color of the apple"	^Stem! !Object subclass: #StemTest	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'LabC'!!StemTest methodsFor: 'testing' stamp: 'YG 2/16/2012 16:36'!run	"testing"		| apple crabApple|	Apple initialize.	CrabApple initialize.		apple := Apple new.	apple setStem: 'black'.	crabApple := CrabApple new.	crabApple setStem: 'brown'.	Transcript show: apple getStem.	Transcript cr.	Transcript show: crabApple getStem.	Transcript cr! !run!run!run!run!run!a := StemTest. !b := StemTest.!b := StemTest!b := StemTest new.!b run!----SNAPSHOT----{16 February 2012 . 5:58:48 pm} SmalltalkLab.image priorSource: 10804!----QUIT/NOSAVE----{16 February 2012 . 6:00:59 pm} SmalltalkLab.image priorSource: 11842!