CSCI 315
Lab 7 - Prelab
Yifan Ge
2/27/2013

Problem 1

Similarities: socket, pipe, and open all have some way to output a file
              descriptor integer to represent the communication channel.

Differences: socket and open output the file desciptor as the return value.
             But pipe put the file descriptor into its parameter. Also the
             parameters each call are different. 


Problem 2
1. Over TCP socket, host program has it's IP address and a unique port number.
   Client program uses the host IP address and port number to connect a socket
   with the host. On the host site, there is another socket assigned to the 
   some IP and port number can response to the requests.

2. bind(2) binds the socket and IP/port number. This is used by the host
   program.

3. connect(2) binds the socket to the IP/port number for the client program.
   We can view this as connect the socket to the server.

4. listen(2) marks the socket as a passive socket, that will be used to accept
   incoming connection requests using accept(2). It will also specify the max
   number of pending connections for the socket.

5. accept(2) is used with connection-based socket types. It extrats the first
   connection request on the queue of pending connections for the listening 
   socket, creates a new connected socket, and return a new file descriptor
   referring to that socket.

6. We can use send() and recv() to operate sending and receiving messages 
   through socket connection.

=================================================================================
Lab 7

Problem 2
1. TCP sockets are used for interprocess communication through internet 
   between two different programs. They don't need to be created by fork.
   Instead, they can even be on different machine and totally unrelated.
   Sockets are able to link these processes and transmit data.

2. First of all, since all the TCP sockets calls live in system call section
   of man page. I think they are provided by the kernel. After search resource
   online, I found that interprocess communication can be implemented in four
   layers: TCP/IP application, Socket layer, Protocal layer, Interface layer.
   Among which, only TCP/IP application lives in user space. Any TCP system 
   call that is made is received by the socket layer.

3. If the IPC is used locally and processes can be generated from the single
   parent, pipes will be preferable. However, if the IPC is used between two
   different machine on the internet, pipes are not going to work. Only
   sockets can be chosen.

4. gethostbyname() returns a structure of type hostent for the given host
   name. This hostname can be either a hostname or an IPv4 address. This API
   help us locate the end point on the internet.

5. an_gethostbyname() can be a replacement for gethostbyname. This function 
   is a thread-safe and portable replacement for gethostbyname(). It takes
   in hostent structure as a parameter and put the host into that param. 
   There is a few more things are added for thread identification. Other
   things are very similar to gethostbyname().
